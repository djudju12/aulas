F: r = a % b 
T: r == 0 ? 
G: a = b e b = r 



r1: Faça (r = a % b) vá_para r2
r2: Se (r == 0) então vá_para r3 senao r4
r3: b
r4: faça (a = b) vá para r5
r5: faça (b = r) vá para r1 

3. Relativamente a programas iterativos:

   a) Em que situação a execução de: "enquanto T faça V", V pode não ser executado?
      Quando a primeira vez que o teste T for feito o resultado for Falso.

   b) Por que a operação ✓ constitui um programa iterativo?
      Porque toda a operação constitui um programa iterativo (?).

   c) Por que se pode afirmar que: A tradução de um programa iterativo para um monolítico é trivial. Cite um exemplo no qual isso ocorre.
      Porque é possível construir a mesma lógica usando instruções rotuladas. 
      
      Por exemplo, é possível escrever um programa iterativo da seguinte forma:
      
         `enquanto T faça F` 
      
      e analogamente podemos escrever 
      
         `r1: se T vá_para r2 senao r3 
          r2: faça F vá_para r1 
          r3: `
      
      o seguinte fluxograma descreve ambos: 
         
                        .--------.
                        |        |
         [parada] <-f--<T>--v-> [F] 
         
      Concluo que os programas iterativos surgem para solucionar os problemas de desvios incondicionais encontrados em programas monolítico, por 
      isso a tradução pode ser considerada trivial. 