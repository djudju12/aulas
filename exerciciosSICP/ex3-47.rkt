(define (semaphore n)
   (let ((mutex (make-mutex)) 
         (p 0))
   (define (acquire)
      (mutex 'acquire)
      (if (< p n) 
         (mutex 'release)
         (+ c 1)))
   (define (release)
      (- c 1))
   (define (dispatch m)
      (cond ((equal? m 'acquire) (acquire))
            ((equal? m 'release) (release))))
   dispatch))

(define (semaphore n)
   (let ((cell (list #f))
         (p 0))
      (define (acquire)
         (test-and-set! cell)
         (if (< p n)
            (clear! cell)
            (+ 1 p)
         (acquire)))
      (define (release)
         (- 1 p))
      (define (dispatch m)
         (cond ((equal? m 'acquire) (acquire))
               ((equal? m 'release) (release))))
      dispatch))
