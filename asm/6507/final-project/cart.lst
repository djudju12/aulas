------- FILE bomb.asm LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						;; Program Name: Bomber Game
      3  10000 ????						;; Author: https://www.udemy.com/course/programming-games-for-the-atari-2600
      4  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      5  10000 ????				       processor	6502
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomb.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomb.asm
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Variables segment
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U009b ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b
     16 U0081		       00	   JetYPos    byte.b
     17 U0082		       00	   BomberXPos byte.b
     18 U0083		       00	   BomberYPos byte.b
     19 U0084		       00	   MissileXPos byte.b
     20 U0085		       00	   MissileYPos byte.b
     21 U0086		       00	   Score      byte.b
     22 U0087		       00	   Timer      byte.b
     23 U0088		       00	   Temp       byte.b
     24 U0089		       00 00	   OnesDigitOffset word.w
     25 U008b		       00 00	   TensDigitOffset word.w
     26 U008d		       00 00	   JetSpritePtr word.w
     27 U008f		       00 00	   JetColorPtr word.w
     28 U0091		       00 00	   BomberSpritePtr word.w
     29 U0093		       00 00	   BomberColorPtr word.w
     30 U0095		       00	   JetAnimOffset byte.b
     31 U0096		       00	   Random     byte.b
     32 U0097		       00	   ScoreSprite byte.b
     33 U0098		       00	   TimerSprite byte.b
     34 U0099		       00	   TerrainColor byte.b
     35 U009a		       00	   RiverColor byte.b
     36 U009b
     37 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U009b							;; Constants
     39 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40 U009b		       00 09	   JET_HEIGHT =	9
     41 U009b		       00 09	   BOMBER_HEIGHT =	9
     42 U009b		       00 05	   DIGITS_HEIGHT =	5
     43 U009b
     44 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45 U009b							;; Start of the program
     46 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     47  10000 ????				       seg	code
     48  f000					      org	$F000
     49  f000
     50  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     52  f00b
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b							;; Init RAM variables and TIA register
     55  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  f00b		       a9 44		      LDA	#68
     57  f00d		       85 80		      STA	JetXPos
     58  f00f		       a9 0a		      LDA	#10
     59  f011		       85 81		      STA	JetYPos
     60  f013
     61  f013		       a9 3e		      LDA	#62
     62  f015		       85 82		      STA	BomberXPos
     63  f017		       a9 53		      LDA	#83
     64  f019		       85 83		      STA	BomberYPos
     65  f01b
     66  f01b		       a9 d4		      LDA	#%11010100
     67  f01d		       85 96		      STA	Random
     68  f01f
     69  f01f		       a9 00		      LDA	#0
     70  f021		       85 86		      STA	Score
     71  f023		       85 87		      STA	Timer
     72  f025
     73  f025		       a9 e8		      LDA	#<JetSprite
     74  f027		       85 8d		      STA	JetSpritePtr
     75  f029		       a9 f2		      LDA	#>JetSprite
     76  f02b		       85 8e		      STA	JetSpritePtr+1
     77  f02d
     78  f02d		       a9 fa		      LDA	#<JetColor
     79  f02f		       85 8f		      STA	JetColorPtr
     80  f031		       a9 f2		      LDA	#>JetColor
     81  f033		       85 90		      STA	JetColorPtr+1
     82  f035
     83  f035		       a9 0c		      LDA	#<BomberSprite
     84  f037		       85 91		      STA	BomberSpritePtr
     85  f039		       a9 f3		      LDA	#>BomberSprite
     86  f03b		       85 92		      STA	BomberSpritePtr+1
     87  f03d
     88  f03d		       a9 15		      LDA	#<BomberColor
     89  f03f		       85 93		      STA	BomberColorPtr
     90  f041		       a9 f3		      LDA	#>BomberColor
     91  f043		       85 94		      STA	BomberColorPtr+1
     92  f045
     93  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     94  f045							;; macros
     95  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     96  f045							;; check if we should display the missile 0
     97  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f045					      MAC	draw_missile
     99  f045					      LDA	#0	; in case dont want to draw M0
    100  f045					      CPX	MissileYPos
    101  f045					      BNE	.SkipMissileDraw	; if (x != missile y position)
    102  f045				   .DrawMissile
    103  f045					      LDA	#%00000010	; enable missile 0 display
    104  f045					      INC	MissileYPos
    105  f045				   .SkipMissileDraw
    106  f045					      STA	ENAM0	; store correct value in the TIA M0 register
    107  f045					      ENDM
    108  f045
    109  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    110  f045							;; Start of the main loop
    111  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    112  f045				   StartFrame
    113  f045
    114  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f045							;; Generate the three lines of the VSYNC and 37 lines of the VBLANK
    116  f045							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    117  f045		       a9 02		      LDA	#02
    118  f047		       85 01		      STA	VBLANK
    119  f049		       85 00		      STA	VSYNC
    120  f04b					      REPEAT	3
    121  f04b		       85 02		      sta	WSYNC
    120  f04b					      REPEND
    121  f04d		       85 02		      sta	WSYNC
    120  f04d					      REPEND
    121  f04f		       85 02		      sta	WSYNC
    122  f051					      REPEND
    123  f051		       a9 00		      LDA	#0
    124  f053		       85 00		      STA	VSYNC
    125  f055					      REPEAT	31
    126  f055		       85 02		      STA	WSYNC
    125  f055					      REPEND
    126  f057		       85 02		      STA	WSYNC
    125  f057					      REPEND
    126  f059		       85 02		      STA	WSYNC
    125  f059					      REPEND
    126  f05b		       85 02		      STA	WSYNC
    125  f05b					      REPEND
    126  f05d		       85 02		      STA	WSYNC
    125  f05d					      REPEND
    126  f05f		       85 02		      STA	WSYNC
    125  f05f					      REPEND
    126  f061		       85 02		      STA	WSYNC
    125  f061					      REPEND
    126  f063		       85 02		      STA	WSYNC
    125  f063					      REPEND
    126  f065		       85 02		      STA	WSYNC
    125  f065					      REPEND
    126  f067		       85 02		      STA	WSYNC
    125  f067					      REPEND
    126  f069		       85 02		      STA	WSYNC
    125  f069					      REPEND
    126  f06b		       85 02		      STA	WSYNC
    125  f06b					      REPEND
    126  f06d		       85 02		      STA	WSYNC
    125  f06d					      REPEND
    126  f06f		       85 02		      STA	WSYNC
    125  f06f					      REPEND
    126  f071		       85 02		      STA	WSYNC
    125  f071					      REPEND
    126  f073		       85 02		      STA	WSYNC
    125  f073					      REPEND
    126  f075		       85 02		      STA	WSYNC
    125  f075					      REPEND
    126  f077		       85 02		      STA	WSYNC
    125  f077					      REPEND
    126  f079		       85 02		      STA	WSYNC
    125  f079					      REPEND
    126  f07b		       85 02		      STA	WSYNC
    125  f07b					      REPEND
    126  f07d		       85 02		      STA	WSYNC
    125  f07d					      REPEND
    126  f07f		       85 02		      STA	WSYNC
    125  f07f					      REPEND
    126  f081		       85 02		      STA	WSYNC
    125  f081					      REPEND
    126  f083		       85 02		      STA	WSYNC
    125  f083					      REPEND
    126  f085		       85 02		      STA	WSYNC
    125  f085					      REPEND
    126  f087		       85 02		      STA	WSYNC
    125  f087					      REPEND
    126  f089		       85 02		      STA	WSYNC
    125  f089					      REPEND
    126  f08b		       85 02		      STA	WSYNC
    125  f08b					      REPEND
    126  f08d		       85 02		      STA	WSYNC
    125  f08d					      REPEND
    126  f08f		       85 02		      STA	WSYNC
    125  f08f					      REPEND
    126  f091		       85 02		      STA	WSYNC
    127  f093					      REPEND
    128  f093							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f093							;; Calculations and tasks performed in the pre-VBlank
    130  f093							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f093		       a5 80		      LDA	JetXPos
    132  f095		       a0 00		      LDY	#0
    133  f097		       20 75 f2 	      JSR	SetObjectXPos
    134  f09a
    135  f09a		       a5 82		      LDA	BomberXPos
    136  f09c		       a0 01		      LDY	#1
    137  f09e		       20 75 f2 	      JSR	SetObjectXPos
    138  f0a1
    139  f0a1		       a5 84		      LDA	MissileXPos
    140  f0a3		       a0 02		      LDY	#2
    141  f0a5		       20 75 f2 	      JSR	SetObjectXPos
    142  f0a8
    143  f0a8		       20 a7 f2 	      JSR	CalculateDigitOffset
    144  f0ab
    145  f0ab		       20 d1 f2 	      JSR	GenerateJetSound
    146  f0ae
    147  f0ae		       85 02		      STA	WSYNC
    148  f0b0		       85 2a		      STA	HMOVE
    149  f0b2
    150  f0b2		       a9 00		      LDA	#0
    151  f0b4		       85 01		      STA	VBLANK
    152  f0b6
    153  f0b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    154  f0b6							;; Display the scoreboard lines
    155  f0b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  f0b6		       a9 00		      LDA	#0
    157  f0b8		       85 09		      STA	COLUBK
    158  f0ba		       85 0d		      STA	PF0
    159  f0bc		       85 0e		      STA	PF1
    160  f0be		       85 0f		      STA	PF2
    161  f0c0		       85 1b		      STA	GRP0
    162  f0c2		       85 1c		      STA	GRP1
    163  f0c4		       85 0a		      STA	CTRLPF
    164  f0c6
    165  f0c6		       a9 1e		      LDA	#$1E
    166  f0c8		       85 08		      STA	COLUPF
    167  f0ca
    168  f0ca		       a2 05		      LDX	#DIGITS_HEIGHT
    169  f0cc				   .ScoreDigitLoop
    170  f0cc		       a4 8b		      LDY	TensDigitOffset	; get the tens digit offset for the Score
    171  f0ce		       b9 1e f3 	      LDA	Digits,Y	; load the bit pattern for the lookup table
    172  f0d1		       29 f0		      AND	#$F0	; remove the ones
    173  f0d3		       85 97		      STA	ScoreSprite
    174  f0d5
    175  f0d5		       a4 89		      LDY	OnesDigitOffset
    176  f0d7		       b9 1e f3 	      LDA	Digits,Y
    177  f0da		       29 0f		      AND	#$0F
    178  f0dc		       05 97		      ORA	ScoreSprite	; merge the ones and tens sprites
    179  f0de		       85 97		      STA	ScoreSprite
    180  f0e0		       85 02		      STA	WSYNC
    181  f0e2		       85 0e		      STA	PF1
    182  f0e4
    183  f0e4		       a4 8c		      LDY	TensDigitOffset+1
    184  f0e6		       b9 1e f3 	      LDA	Digits,Y
    185  f0e9		       29 f0		      AND	#$F0
    186  f0eb		       85 98		      STA	TimerSprite
    187  f0ed
    188  f0ed		       a4 8a		      LDY	OnesDigitOffset+1
    189  f0ef		       b9 1e f3 	      LDA	Digits,Y
    190  f0f2		       29 0f		      AND	#$0F
    191  f0f4		       05 98		      ORA	TimerSprite
    192  f0f6		       85 98		      STA	TimerSprite
    193  f0f8
    194  f0f8		       20 c7 f2 	      JSR	Sleep12ClocksCycles
    195  f0fb
    196  f0fb		       85 0e		      STA	PF1
    197  f0fd
    198  f0fd		       a4 97		      LDY	ScoreSprite
    199  f0ff		       85 02		      STA	WSYNC
    200  f101
    201  f101		       84 0e		      STY	PF1
    202  f103		       e6 8b		      INC	TensDigitOffset
    203  f105		       e6 8c		      INC	TensDigitOffset+1
    204  f107		       e6 89		      INC	OnesDigitOffset
    205  f109		       e6 8a		      INC	OnesDigitOffset+1
    206  f10b
    207  f10b		       20 c7 f2 	      JSR	Sleep12ClocksCycles
    208  f10e
    209  f10e		       ca		      DEX
    210  f10f		       85 0e		      STA	PF1
    211  f111		       d0 b9		      BNE	.ScoreDigitLoop
    212  f113
    213  f113		       85 02		      STA	WSYNC
    214  f115
    215  f115		       a9 00		      LDA	#0
    216  f117		       85 0d		      STA	PF0
    217  f119		       85 0e		      STA	PF1
    218  f11b		       85 0f		      STA	PF2
    219  f11d		       85 02		      STA	WSYNC
    220  f11f		       85 02		      STA	WSYNC
    221  f121		       85 02		      STA	WSYNC
    222  f123
    223  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    224  f123							;; Display the visibles scanlines of the game
    225  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    226  f123				   GameVisibleLine
    227  f123		       a5 99		      LDA	TerrainColor
    228  f125		       85 08		      STA	COLUPF
    229  f127
    230  f127		       a5 9a		      LDA	RiverColor
    231  f129		       85 09		      STA	COLUBK
    232  f12b
    233  f12b		       a9 01		      LDA	#00000001	; Reflect playfield
    234  f12d		       85 0a		      STA	CTRLPF
    235  f12f		       a9 f0		      LDA	#$F0
    236  f131		       85 0d		      STA	PF0
    237  f133		       a9 fc		      LDA	#$FC
    238  f135		       85 0e		      STA	PF1
    239  f137		       a9 00		      LDA	#0
    240  f139		       85 0f		      STA	PF2
    241  f13b
    242  f13b		       a2 55		      LDX	#85	; remaining of the visible scanlines
    243  f13d				   .GameLineLoop
      0  f13d					      DRAW_MISSILE		; macro to check if we should draw the missile
      1  f13d		       a9 00		      LDA	#0
      2  f13f		       e4 85		      CPX	MissileYPos
      3  f141		       d0 04		      BNE	.SkipMissileDraw
      4  f143				   .DrawMissile
      5  f143		       a9 02		      LDA	#%00000010
      6  f145		       e6 85		      INC	MissileYPos
      7  f147				   .SkipMissileDraw
      8  f147		       85 1d		      STA	ENAM0
    245  f149				   .AreWeInsideJetSprite
    246  f149		       8a		      TXA
    247  f14a		       38		      SEC
    248  f14b		       e5 81		      SBC	JetYPos
    249  f14d		       c9 09		      CMP	#JET_HEIGHT
    250  f14f		       90 02		      BCC	.DrawSpriteP0
    251  f151		       a9 00		      LDA	#0
    252  f153
    253  f153				   .DrawSpriteP0
    254  f153		       18		      CLC
    255  f154		       65 95		      ADC	JetAnimOffset
    256  f156
    257  f156		       a8		      TAY		; load Y so we can work with the pointer
    258  f157		       b1 8d		      LDA	(JetSpritePtr),Y
    259  f159		       85 02		      STA	WSYNC
    260  f15b		       85 1b		      STA	GRP0
    261  f15d		       b1 8f		      LDA	(JetColorPtr),Y
    262  f15f		       85 06		      STA	COLUP0
    263  f161
    264  f161				   .AreWeInsideBomberSprite
    265  f161		       8a		      TXA
    266  f162		       38		      SEC
    267  f163		       e5 83		      SBC	BomberYPos
    268  f165		       c9 09		      CMP	#BOMBER_HEIGHT
    269  f167		       90 02		      BCC	.DrawSpriteP1
    270  f169		       a9 00		      LDA	#0
    271  f16b
    272  f16b				   .DrawSpriteP1
    273  f16b		       a8		      TAY		; load Y so we can work with the pointer
    274  f16c		       a9 05		      LDA	#5
    275  f16e		       85 05		      STA	NUSIZ1	; stretch player 1 sprite
    276  f170		       b1 91		      LDA	(BomberSpritePtr),Y
    277  f172		       85 02		      STA	WSYNC
    278  f174		       85 1c		      STA	GRP1
    279  f176		       b1 93		      LDA	(BomberColorPtr),Y
    280  f178		       85 07		      STA	COLUP1
    281  f17a
    282  f17a		       ca		      DEX
    283  f17b		       d0 c0		      BNE	.GameLineLoop
    284  f17d		       a9 00		      LDA	#0
    285  f17f		       85 95		      STA	JetAnimOffset
    286  f181
    287  f181							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    288  f181							;; Output the 30 more VBLANK oversacan lines
    289  f181							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    290  f181		       a9 02		      LDA	#2
    291  f183		       85 01		      STA	VBLANK
    292  f185					      REPEAT	30
    293  f185		       85 02		      STA	WSYNC
    292  f185					      REPEND
    293  f187		       85 02		      STA	WSYNC
    292  f187					      REPEND
    293  f189		       85 02		      STA	WSYNC
    292  f189					      REPEND
    293  f18b		       85 02		      STA	WSYNC
    292  f18b					      REPEND
    293  f18d		       85 02		      STA	WSYNC
    292  f18d					      REPEND
    293  f18f		       85 02		      STA	WSYNC
    292  f18f					      REPEND
    293  f191		       85 02		      STA	WSYNC
    292  f191					      REPEND
    293  f193		       85 02		      STA	WSYNC
    292  f193					      REPEND
    293  f195		       85 02		      STA	WSYNC
    292  f195					      REPEND
    293  f197		       85 02		      STA	WSYNC
    292  f197					      REPEND
    293  f199		       85 02		      STA	WSYNC
    292  f199					      REPEND
    293  f19b		       85 02		      STA	WSYNC
    292  f19b					      REPEND
    293  f19d		       85 02		      STA	WSYNC
    292  f19d					      REPEND
    293  f19f		       85 02		      STA	WSYNC
    292  f19f					      REPEND
    293  f1a1		       85 02		      STA	WSYNC
    292  f1a1					      REPEND
    293  f1a3		       85 02		      STA	WSYNC
    292  f1a3					      REPEND
    293  f1a5		       85 02		      STA	WSYNC
    292  f1a5					      REPEND
    293  f1a7		       85 02		      STA	WSYNC
    292  f1a7					      REPEND
    293  f1a9		       85 02		      STA	WSYNC
    292  f1a9					      REPEND
    293  f1ab		       85 02		      STA	WSYNC
    292  f1ab					      REPEND
    293  f1ad		       85 02		      STA	WSYNC
    292  f1ad					      REPEND
    293  f1af		       85 02		      STA	WSYNC
    292  f1af					      REPEND
    293  f1b1		       85 02		      STA	WSYNC
    292  f1b1					      REPEND
    293  f1b3		       85 02		      STA	WSYNC
    292  f1b3					      REPEND
    293  f1b5		       85 02		      STA	WSYNC
    292  f1b5					      REPEND
    293  f1b7		       85 02		      STA	WSYNC
    292  f1b7					      REPEND
    293  f1b9		       85 02		      STA	WSYNC
    292  f1b9					      REPEND
    293  f1bb		       85 02		      STA	WSYNC
    292  f1bb					      REPEND
    293  f1bd		       85 02		      STA	WSYNC
    292  f1bd					      REPEND
    293  f1bf		       85 02		      STA	WSYNC
    294  f1c1					      REPEND
    295  f1c1		       a9 00		      LDA	#0
    296  f1c3		       85 01		      STA	VBLANK
    297  f1c5
    298  f1c5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    299  f1c5							;; Process joystick input for P0
    300  f1c5							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    301  f1c5				   CheckP0Up
    302  f1c5		       a9 10		      LDA	#%00010000
    303  f1c7		       2c 80 02 	      BIT	SWCHA
    304  f1ca		       d0 0c		      BNE	CheckP0Down
    305  f1cc							; logic goes here \/
    306  f1cc		       a5 81		      LDA	JetYPos
    307  f1ce		       c9 4d		      CMP	#77
    308  f1d0		       10 06		      BPL	CheckP0Down
    309  f1d2		       e6 81		      INC	JetYPos
    310  f1d4		       a9 00		      LDA	#0
    311  f1d6		       85 95		      STA	JetAnimOffset
    312  f1d8
    313  f1d8				   CheckP0Down
    314  f1d8		       a9 20		      LDA	#%00100000
    315  f1da		       2c 80 02 	      BIT	SWCHA
    316  f1dd		       d0 0c		      BNE	CheckP0Left
    317  f1df							; logic goes here \/
    318  f1df		       a5 81		      LDA	JetYPos
    319  f1e1		       c9 02		      CMP	#2
    320  f1e3		       30 06		      BMI	CheckP0Left
    321  f1e5		       c6 81		      DEC	JetYPos
    322  f1e7		       a9 00		      LDA	#0
    323  f1e9		       85 95		      STA	JetAnimOffset
    324  f1eb
    325  f1eb				   CheckP0Left
    326  f1eb		       a9 40		      LDA	#%01000000
    327  f1ed		       2c 80 02 	      BIT	SWCHA
    328  f1f0		       d0 0c		      BNE	CheckP0Right
    329  f1f2							; logic goes here \/
    330  f1f2		       a5 80		      LDA	JetXPos
    331  f1f4		       c9 1e		      CMP	#30
    332  f1f6		       30 06		      BMI	CheckP0Right
    333  f1f8		       c6 80		      DEC	JetXPos
    334  f1fa		       a9 09		      LDA	#JET_HEIGHT
    335  f1fc		       85 95		      STA	JetAnimOffset
    336  f1fe
    337  f1fe				   CheckP0Right
    338  f1fe		       a9 80		      LDA	#%10000000
    339  f200		       2c 80 02 	      BIT	SWCHA
    340  f203		       d0 0c		      BNE	CheckButtonPressed
    341  f205							; logic goes here \/
    342  f205		       a5 80		      LDA	JetXPos
    343  f207		       c9 68		      CMP	#104
    344  f209		       10 06		      BPL	CheckButtonPressed
    345  f20b		       e6 80		      INC	JetXPos
    346  f20d		       a9 09		      LDA	#JET_HEIGHT
    347  f20f		       85 95		      STA	JetAnimOffset
    348  f211
    349  f211				   CheckButtonPressed
    350  f211		       a9 80		      LDA	#%10000000
    351  f213		       24 0c		      BIT	INPT4
    352  f215		       d0 0e		      BNE	EndInputCheck
    353  f217							; logic goes here \/
    354  f217		       a5 80		      LDA	JetXPos
    355  f219		       18		      CLC
    356  f21a		       69 05		      ADC	#5
    357  f21c		       85 84		      STA	MissileXPos
    358  f21e		       a5 81		      LDA	JetYPos
    359  f220		       18		      CLC
    360  f221		       69 05		      ADC	#5
    361  f223		       85 85		      STA	MissileYPos
    362  f225
    363  f225				   EndInputCheck
    364  f225							; logic goes here \/
    365  f225
    366  f225							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    367  f225							;; Update positions
    368  f225							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    369  f225				   UpdateBomberPos
    370  f225		       a5 83		      LDA	BomberYPos
    371  f227		       18		      CLC
    372  f228		       c9 00		      CMP	#0
    373  f22a		       30 05		      BMI	.ResetBomberPosition
    374  f22c		       c6 83		      DEC	BomberYPos
    375  f22e		       4c 3d f2 	      JMP	EndPositionUpdate
    376  f231
    377  f231				   .ResetBomberPosition
    378  f231		       20 89 f2 	      JSR	GetRandomBomberPos
    379  f234
    380  f234				   .SetScoreValues
    381  f234		       f8		      SED
    382  f235		       a5 87		      LDA	Timer
    383  f237		       18		      CLC
    384  f238		       69 01		      ADC	#1
    385  f23a		       85 87		      STA	Timer
    386  f23c		       d8		      CLD		; Disable BCD mode
    387  f23d
    388  f23d				   EndPositionUpdate
    389  f23d
    390  f23d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    391  f23d							;; Watch for the collisions
    392  f23d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    393  f23d				   CheckCollissionP0P1
    394  f23d		       a9 80		      LDA	#%10000000
    395  f23f		       24 07		      BIT	CXPPMM
    396  f241		       d0 06		      BNE	.CollisionP0P1
    397  f243		       20 c8 f2 	      JSR	SetPFBKColor
    398  f246		       4c 4c f2 	      JMP	CheckCollissionM0P1
    399  f249				   .CollisionP0P1
    400  f249		       20 6a f2 	      JSR	GameOver
    401  f24c
    402  f24c				   CheckCollissionM0P1
    403  f24c		       a9 80		      LDA	#%10000000
    404  f24e		       24 00		      BIT	CXM0P
    405  f250		       d0 03		      BNE	.CollisionM0P1
    406  f252		       4c 65 f2 	      JMP	EndCollisionCheck
    407  f255				   .CollisionM0P1
    408  f255		       f8		      SED
    409  f256		       a5 86		      LDA	Score
    410  f258		       18		      CLC
    411  f259		       69 01		      ADC	#1
    412  f25b		       85 86		      STA	Score
    413  f25d		       d8		      CLD
    414  f25e		       a9 00		      LDA	#0
    415  f260		       85 85		      STA	MissileYPos
    416  f262
    417  f262		       20 89 f2 	      JSR	GetRandomBomberPos
    418  f265
    419  f265				   EndCollisionCheck
    420  f265		       85 2c		      STA	CXCLR
    421  f267
    422  f267							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    423  f267							;; End of the main loop
    424  f267							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    425  f267		       4c 45 f0 	      JMP	StartFrame
    426  f26a
    427  f26a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    428  f26a							;; Game Over
    429  f26a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    430  f26a				   GameOver   subroutine
    431  f26a		       a9 30		      LDA	#$30
    432  f26c		       85 99		      STA	TerrainColor
    433  f26e		       85 9a		      STA	RiverColor
    434  f270		       a9 00		      LDA	#0
    435  f272		       85 86		      STA	Score
    436  f274		       60		      RTS
    437  f275
    438  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    439  f275							;; Subroutine to handle object horizontal position with fine offset
    440  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    441  f275							;; A is the target x-coord position in pixels of our object
    442  f275							;; Y is the object type (0: P0, 1: P1, 2: Missile0, 3: Missile1, 4: Ball)
    443  f275							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    444  f275				   SetObjectXPos subroutine
    445  f275		       85 02		      STA	WSYNC
    446  f277		       38		      SEC
    447  f278				   .Div15Loop
    448  f278		       e9 0f		      SBC	#15
    449  f27a		       b0 fc		      BCS	.Div15Loop
    450  f27c		       49 07		      EOR	#7
    451  f27e		       0a		      ASL
    452  f27f		       0a		      ASL
    453  f280		       0a		      ASL
    454  f281		       0a		      ASL
    455  f282		       99 20 00 	      STA	HMP0,Y
    456  f285		       99 10 00 	      STA	RESP0,Y
    457  f288		       60		      RTS
    458  f289
    459  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    460  f289							;; Subroutine to generate a LFSR random number
    461  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    462  f289							;; Generate a LFSR random number
    463  f289							;; Divide the random value by 4 to limit the size of the result match river.
    464  f289							;; After, sums 30 to compensate the green PF
    465  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    466  f289				   GetRandomBomberPos subroutine
    467  f289		       a5 96		      LDA	Random	; Load starting random seed
    468  f28b		       0a		      ASL		; arithmetic shift-left
    469  f28c		       45 96		      EOR	Random	; XOR Accumulator with Random
    470  f28e		       0a		      ASL		; arithmetic shift-left
    471  f28f		       45 96		      EOR	Random	; XOR Accumulator with Random
    472  f291		       0a		      ASL		; arithmetic shift-left
    473  f292		       0a		      ASL		; arithmetic shift-left
    474  f293		       45 96		      EOR	Random	; XOR Accumulator with Random
    475  f295		       0a		      ASL		; arithmetic shift-left
    476  f296		       26 96		      ROL	Random	; rotate left
    477  f298
    478  f298		       4a		      LSR		;
    479  f299		       4a		      LSR		; divide by 4
    480  f29a		       85 82		      STA	BomberXPos
    481  f29c		       a9 1e		      LDA	#30
    482  f29e		       65 82		      ADC	BomberXPos
    483  f2a0		       85 82		      STA	BomberXPos
    484  f2a2
    485  f2a2		       a9 55		      LDA	#85
    486  f2a4		       85 83		      STA	BomberYPos
    487  f2a6
    488  f2a6		       60		      RTS
    489  f2a7
    490  f2a7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    491  f2a7							;; Subroutine to handle scoreboard digits to be displayed on the screen
    492  f2a7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    493  f2a7							;; Convert the high AND low nibbles of the variable Score and Timer into the
    494  f2a7							;; offsets of digits lookup table so the values can be displayed.
    495  f2a7							;; Eache digit has a height of 5 bytes.
    496  f2a7							;;
    497  f2a7							;; For the low nibble we need to multiply by 5
    498  f2a7							;; - we can use left shifts to perfom multiplication by 2
    499  f2a7							;; - for any number N, the value of N*5 = (N*2*2)+N
    500  f2a7							;;
    501  f2a7							;; For the upper nibble, since its already times 16, we need to divide it AND
    502  f2a7							;; the multiply by 5:
    503  f2a7							;; - we can use right shifts to perfom division by 2
    504  f2a7							;; - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    505  f2a7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    506  f2a7				   CalculateDigitOffset subroutine
    507  f2a7		       a2 01		      LDX	#1
    508  f2a9				   .PrepareScoreLoop
    509  f2a9		       b5 86		      LDA	Score,X	; Load A with timer when X=1 because timer is below score
    510  f2ab		       29 0f		      AND	#$0F	; remove the tens digit by masking 4 bits 00001111
    511  f2ad		       85 88		      STA	Temp	; save A
    512  f2af		       0a		      ASL		; (N*2)
    513  f2b0		       0a		      ASL		; (N*2)
    514  f2b1		       65 88		      ADC	Temp	; +N
    515  f2b3		       95 89		      STA	OnesDigitOffset,X	; Save A in OnesDigitOffset+1 or OnesDigitOffset+0
    516  f2b5
    517  f2b5		       b5 86		      LDA	Score,X	; Load A with timer when X=1 because timer is below score
    518  f2b7		       29 f0		      AND	#$F0	; remove the ones digit by masking 4 bits 1111000
    519  f2b9		       4a		      LSR
    520  f2ba		       4a		      LSR
    521  f2bb		       85 88		      STA	Temp
    522  f2bd		       4a		      LSR
    523  f2be		       4a		      LSR
    524  f2bf		       65 88		      ADC	Temp
    525  f2c1		       95 8b		      STA	TensDigitOffset,X
    526  f2c3
    527  f2c3		       ca		      DEX
    528  f2c4		       10 e3		      BPL	.PrepareScoreLoop
    529  f2c6
    530  f2c6		       60		      RTS
    531  f2c7
    532  f2c7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    533  f2c7							;; subroutine to waste 12 clocks cycles
    534  f2c7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    535  f2c7				   Sleep12ClocksCycles subroutine		; JSR = 6
    536  f2c7		       60		      RTS		; RTS = 6
    537  f2c8
    538  f2c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    539  f2c8							;; Set the color of terrain (PF) and river (BK)
    540  f2c8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    541  f2c8				   SetPFBKColor subroutine
    542  f2c8		       a9 c2		      LDA	#$C2
    543  f2ca		       85 99		      STA	TerrainColor
    544  f2cc		       a9 84		      LDA	#$84
    545  f2ce		       85 9a		      STA	RiverColor
    546  f2d0		       60		      RTS
    547  f2d1
    548  f2d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    549  f2d1							;; Configure Jet Sound based on the jet y-pos
    550  f2d1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    551  f2d1				   GenerateJetSound subroutine
    552  f2d1		       a9 01		      LDA	#1
    553  f2d3		       85 19		      STA	AUDV0
    554  f2d5
    555  f2d5		       a5 81		      LDA	JetYPos
    556  f2d7		       4a		      LSR
    557  f2d8		       4a		      LSR
    558  f2d9		       4a		      LSR
    559  f2da		       85 88		      STA	Temp
    560  f2dc		       a9 19		      LDA	#25
    561  f2de		       38		      SEC
    562  f2df		       e5 88		      SBC	Temp
    563  f2e1		       85 17		      STA	AUDF0
    564  f2e3
    565  f2e3		       a9 08		      LDA	#8
    566  f2e5		       85 15		      STA	AUDC0
    567  f2e7		       60		      RTS
    568  f2e8
    569  f2e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    570  f2e8							;; Lookup table for the sprites
    571  f2e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    572  f2e8				   JetSprite
    573  f2e8		       00		      .byte.b	#%00000000
    574  f2e9		       08		      .byte.b	#%00001000
    575  f2ea		       7f		      .byte.b	#%01111111
    576  f2eb		       3e		      .byte.b	#%00111110
    577  f2ec		       1c		      .byte.b	#%00011100
    578  f2ed		       1c		      .byte.b	#%00011100
    579  f2ee		       08		      .byte.b	#%00001000
    580  f2ef		       08		      .byte.b	#%00001000
    581  f2f0		       08		      .byte.b	#%00001000
    582  f2f1
    583  f2f1				   JetSpriteTurn
    584  f2f1		       00		      .byte.b	#%00000000
    585  f2f2		       08		      .byte.b	#%00001000
    586  f2f3		       3e		      .byte.b	#%00111110
    587  f2f4		       1c		      .byte.b	#%00011100
    588  f2f5		       1c		      .byte.b	#%00011100
    589  f2f6		       1c		      .byte.b	#%00011100
    590  f2f7		       08		      .byte.b	#%00001000
    591  f2f8		       08		      .byte.b	#%00001000
    592  f2f9		       08		      .byte.b	#%00001000
    593  f2fa
    594  f2fa				   JetColor
    595  f2fa		       00		      .byte.b	#$00
    596  f2fb		       fe		      .byte.b	#$FE
    597  f2fc		       08		      .byte.b	#$08
    598  f2fd		       0a		      .byte.b	#$0A
    599  f2fe		       0c		      .byte.b	#$0C
    600  f2ff		       02		      .byte.b	#$02
    601  f300		       b8		      .byte.b	#$B8
    602  f301		       0a		      .byte.b	#$0A
    603  f302		       04		      .byte.b	#$04
    604  f303
    605  f303		       00		      .byte.b	#$00
    606  f304		       fe		      .byte.b	#$FE
    607  f305		       08		      .byte.b	#$08
    608  f306		       0a		      .byte.b	#$0A
    609  f307		       0c		      .byte.b	#$0C
    610  f308		       02		      .byte.b	#$02
    611  f309		       b8		      .byte.b	#$B8
    612  f30a		       0a		      .byte.b	#$0A
    613  f30b		       04		      .byte.b	#$04
    614  f30c
    615  f30c				   BomberSprite
    616  f30c		       00		      .byte.b	#%00000000
    617  f30d		       08		      .byte.b	#%00001000
    618  f30e		       08		      .byte.b	#%00001000
    619  f30f		       2a		      .byte.b	#%00101010
    620  f310		       7f		      .byte.b	#%01111111
    621  f311		       3e		      .byte.b	#%00111110
    622  f312		       2a		      .byte.b	#%00101010
    623  f313		       08		      .byte.b	#%00001000
    624  f314		       1c		      .byte.b	#%00011100
    625  f315
    626  f315				   BomberColor
    627  f315		       00		      .byte.b	#$00
    628  f316		       24		      .byte.b	#$24
    629  f317		       24		      .byte.b	#$24
    630  f318		       0c		      .byte.b	#$0C
    631  f319		       40		      .byte.b	#$40
    632  f31a		       40		      .byte.b	#$40
    633  f31b		       40		      .byte.b	#$40
    634  f31c		       40		      .byte.b	#$40
    635  f31d		       40		      .byte.b	#$40
    636  f31e
    637  f31e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    638  f31e							;; Digits graphics
    639  f31e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    640  f31e				   Digits
    641  f31e		       77		      .byte.b	%01110111
    642  f31f		       55		      .byte.b	%01010101
    643  f320		       55		      .byte.b	%01010101
    644  f321		       55		      .byte.b	%01010101
    645  f322		       77		      .byte.b	%01110111
    646  f323
    647  f323		       11		      .byte.b	%00010001
    648  f324		       11		      .byte.b	%00010001
    649  f325		       11		      .byte.b	%00010001
    650  f326		       11		      .byte.b	%00010001
    651  f327		       11		      .byte.b	%00010001
    652  f328
    653  f328		       77		      .byte.b	%01110111
    654  f329		       11		      .byte.b	%00010001
    655  f32a		       77		      .byte.b	%01110111
    656  f32b		       44		      .byte.b	%01000100
    657  f32c		       77		      .byte.b	%01110111
    658  f32d
    659  f32d		       77		      .byte.b	%01110111
    660  f32e		       11		      .byte.b	%00010001
    661  f32f		       33		      .byte.b	%00110011
    662  f330		       11		      .byte.b	%00010001
    663  f331		       77		      .byte.b	%01110111
    664  f332
    665  f332		       55		      .byte.b	%01010101
    666  f333		       55		      .byte.b	%01010101
    667  f334		       77		      .byte.b	%01110111
    668  f335		       11		      .byte.b	%00010001
    669  f336		       11		      .byte.b	%00010001
    670  f337
    671  f337		       77		      .byte.b	%01110111
    672  f338		       44		      .byte.b	%01000100
    673  f339		       77		      .byte.b	%01110111
    674  f33a		       11		      .byte.b	%00010001
    675  f33b		       77		      .byte.b	%01110111
    676  f33c
    677  f33c		       77		      .byte.b	%01110111
    678  f33d		       44		      .byte.b	%01000100
    679  f33e		       77		      .byte.b	%01110111
    680  f33f		       55		      .byte.b	%01010101
    681  f340		       77		      .byte.b	%01110111
    682  f341
    683  f341		       77		      .byte.b	%01110111
    684  f342		       11		      .byte.b	%00010001
    685  f343		       11		      .byte.b	%00010001
    686  f344		       11		      .byte.b	%00010001
    687  f345		       11		      .byte.b	%00010001
    688  f346
    689  f346		       77		      .byte.b	%01110111
    690  f347		       55		      .byte.b	%01010101
    691  f348		       77		      .byte.b	%01110111
    692  f349		       55		      .byte.b	%01010101
    693  f34a		       77		      .byte.b	%01110111
    694  f34b
    695  f34b		       77		      .byte.b	%01110111
    696  f34c		       55		      .byte.b	%01010101
    697  f34d		       77		      .byte.b	%01110111
    698  f34e		       11		      .byte.b	%00010001
    699  f34f		       77		      .byte.b	%01110111
    700  f350
    701  f350		       22		      .byte.b	%00100010
    702  f351		       55		      .byte.b	%01010101
    703  f352		       77		      .byte.b	%01110111
    704  f353		       55		      .byte.b	%01010101
    705  f354		       55		      .byte.b	%01010101
    706  f355
    707  f355		       66		      .byte.b	%01100110
    708  f356		       55		      .byte.b	%01010101
    709  f357		       66		      .byte.b	%01100110
    710  f358		       55		      .byte.b	%01010101
    711  f359		       66		      .byte.b	%01100110
    712  f35a
    713  f35a		       33		      .byte.b	%00110011
    714  f35b		       44		      .byte.b	%01000100
    715  f35c		       44		      .byte.b	%01000100
    716  f35d		       44		      .byte.b	%01000100
    717  f35e		       33		      .byte.b	%00110011
    718  f35f
    719  f35f		       66		      .byte.b	%01100110
    720  f360		       55		      .byte.b	%01010101
    721  f361		       55		      .byte.b	%01010101
    722  f362		       55		      .byte.b	%01010101
    723  f363		       66		      .byte.b	%01100110
    724  f364
    725  f364		       77		      .byte.b	%01110111
    726  f365		       44		      .byte.b	%01000100
    727  f366		       66		      .byte.b	%01100110
    728  f367		       44		      .byte.b	%01000100
    729  f368		       77		      .byte.b	%01110111
    730  f369
    731  f369		       77		      .byte.b	%01110111
    732  f36a		       44		      .byte.b	%01000100
    733  f36b		       66		      .byte.b	%01100110
    734  f36c		       44		      .byte.b	%01000100
    735  f36d		       44		      .byte.b	%01000100
    736  f36e
    737  f36e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    738  f36e							;; Filling the 4kb memory needed
    739  f36e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    740  fffc					      org	$FFFC
    741  fffc		       00 f0		      .word.w	Reset
    742  fffe		       00 f0		      .word.w	Reset
