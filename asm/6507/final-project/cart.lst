------- FILE bomb.asm LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						;; Program Name: Bomber Game
      3  10000 ????						;; Author: https://www.udemy.com/course/programming-games-for-the-atari-2600
      4  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      5  10000 ????				       processor	6502
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomb.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomb.asm
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Variables segment
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U0099 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b
     16 U0081		       00	   JetYPos    byte.b
     17 U0082		       00	   BomberXPos byte.b
     18 U0083		       00	   BomberYPos byte.b
     19 U0084		       00	   Score      byte.b
     20 U0085		       00	   Timer      byte.b
     21 U0086		       00	   Temp       byte.b
     22 U0087		       00 00	   OnesDigitOffset word.w
     23 U0089		       00 00	   TensDigitOffset word.w
     24 U008b		       00 00	   JetSpritePtr word.w
     25 U008d		       00 00	   JetColorPtr word.w
     26 U008f		       00 00	   BomberSpritePtr word.w
     27 U0091		       00 00	   BomberColorPtr word.w
     28 U0093		       00	   JetAnimOffset byte.b
     29 U0094		       00	   Random     byte.b
     30 U0095		       00	   ScoreSprite byte.b
     31 U0096		       00	   TimerSprite byte.b
     32 U0097		       00	   TerrainColor byte.b
     33 U0098		       00	   RiverColor byte.b
     34 U0099
     35 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     36 U0099							;; Constants
     37 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U0099		       00 09	   JET_HEIGHT =	9
     39 U0099		       00 09	   BOMBER_HEIGHT =	9
     40 U0099		       00 05	   DIGITS_HEIGHT =	5
     41 U0099
     42 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43 U0099							;; Start of the program
     44 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  10000 ????				       seg	code
     46  f000					      org	$F000
     47  f000
     48  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     50  f00b
     51  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f00b							;; Init RAM variables and TIA register
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b		       a9 32		      LDA	#50
     55  f00d		       85 80		      STA	JetXPos
     56  f00f		       a9 0a		      LDA	#10
     57  f011		       85 81		      STA	JetYPos
     58  f013
     59  f013		       a9 28		      LDA	#40
     60  f015		       85 82		      STA	BomberXPos
     61  f017		       a9 36		      LDA	#54
     62  f019		       85 83		      STA	BomberYPos
     63  f01b
     64  f01b		       a9 d4		      LDA	#%11010100
     65  f01d		       85 94		      STA	Random
     66  f01f
     67  f01f		       a9 00		      LDA	#0
     68  f021		       85 84		      STA	Score
     69  f023		       85 85		      STA	Timer
     70  f025
     71  f025		       a9 84		      LDA	#$84
     72  f027		       85 97		      STA	TerrainColor
     73  f029		       a9 c2		      LDA	#$C2
     74  f02b		       85 98		      STA	RiverColor
     75  f02d
     76  f02d		       a9 93		      LDA	#<JetSprite
     77  f02f		       85 8b		      STA	JetSpritePtr
     78  f031		       a9 f2		      LDA	#>JetSprite
     79  f033		       85 8c		      STA	JetSpritePtr+1
     80  f035
     81  f035		       a9 a5		      LDA	#<JetColor
     82  f037		       85 8d		      STA	JetColorPtr
     83  f039		       a9 f2		      LDA	#>JetColor
     84  f03b		       85 8e		      STA	JetColorPtr+1
     85  f03d
     86  f03d		       a9 b7		      LDA	#<BomberSprite
     87  f03f		       85 8f		      STA	BomberSpritePtr
     88  f041		       a9 f2		      LDA	#>BomberSprite
     89  f043		       85 90		      STA	BomberSpritePtr+1
     90  f045
     91  f045		       a9 c0		      LDA	#<BomberColor
     92  f047		       85 91		      STA	BomberColorPtr
     93  f049		       a9 f2		      LDA	#>BomberColor
     94  f04b		       85 92		      STA	BomberColorPtr+1
     95  f04d
     96  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     97  f04d							;; Start of the main loop
     98  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     99  f04d				   StartFrame
    100  f04d
    101  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    102  f04d							;; Generate the three lines of the VSYNC and 37 lines of the VBLANK
    103  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    104  f04d		       a9 02		      LDA	#02
    105  f04f		       85 01		      STA	VBLANK
    106  f051		       85 00		      STA	VSYNC
    107  f053					      REPEAT	3
    108  f053		       85 02		      sta	WSYNC
    107  f053					      REPEND
    108  f055		       85 02		      sta	WSYNC
    107  f055					      REPEND
    108  f057		       85 02		      sta	WSYNC
    109  f059					      REPEND
    110  f059		       a9 00		      LDA	#0
    111  f05b		       85 00		      STA	VSYNC
    112  f05d					      REPEAT	33
    113  f05d		       85 02		      STA	WSYNC
    112  f05d					      REPEND
    113  f05f		       85 02		      STA	WSYNC
    112  f05f					      REPEND
    113  f061		       85 02		      STA	WSYNC
    112  f061					      REPEND
    113  f063		       85 02		      STA	WSYNC
    112  f063					      REPEND
    113  f065		       85 02		      STA	WSYNC
    112  f065					      REPEND
    113  f067		       85 02		      STA	WSYNC
    112  f067					      REPEND
    113  f069		       85 02		      STA	WSYNC
    112  f069					      REPEND
    113  f06b		       85 02		      STA	WSYNC
    112  f06b					      REPEND
    113  f06d		       85 02		      STA	WSYNC
    112  f06d					      REPEND
    113  f06f		       85 02		      STA	WSYNC
    112  f06f					      REPEND
    113  f071		       85 02		      STA	WSYNC
    112  f071					      REPEND
    113  f073		       85 02		      STA	WSYNC
    112  f073					      REPEND
    113  f075		       85 02		      STA	WSYNC
    112  f075					      REPEND
    113  f077		       85 02		      STA	WSYNC
    112  f077					      REPEND
    113  f079		       85 02		      STA	WSYNC
    112  f079					      REPEND
    113  f07b		       85 02		      STA	WSYNC
    112  f07b					      REPEND
    113  f07d		       85 02		      STA	WSYNC
    112  f07d					      REPEND
    113  f07f		       85 02		      STA	WSYNC
    112  f07f					      REPEND
    113  f081		       85 02		      STA	WSYNC
    112  f081					      REPEND
    113  f083		       85 02		      STA	WSYNC
    112  f083					      REPEND
    113  f085		       85 02		      STA	WSYNC
    112  f085					      REPEND
    113  f087		       85 02		      STA	WSYNC
    112  f087					      REPEND
    113  f089		       85 02		      STA	WSYNC
    112  f089					      REPEND
    113  f08b		       85 02		      STA	WSYNC
    112  f08b					      REPEND
    113  f08d		       85 02		      STA	WSYNC
    112  f08d					      REPEND
    113  f08f		       85 02		      STA	WSYNC
    112  f08f					      REPEND
    113  f091		       85 02		      STA	WSYNC
    112  f091					      REPEND
    113  f093		       85 02		      STA	WSYNC
    112  f093					      REPEND
    113  f095		       85 02		      STA	WSYNC
    112  f095					      REPEND
    113  f097		       85 02		      STA	WSYNC
    112  f097					      REPEND
    113  f099		       85 02		      STA	WSYNC
    112  f099					      REPEND
    113  f09b		       85 02		      STA	WSYNC
    112  f09b					      REPEND
    113  f09d		       85 02		      STA	WSYNC
    114  f09f					      REPEND
    115  f09f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    116  f09f							;; Calculations and tasks performed in the pre-VBlank
    117  f09f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    118  f09f		       a5 80		      LDA	JetXPos
    119  f0a1		       a0 00		      LDY	#0
    120  f0a3		       20 37 f2 	      JSR	SetObjectXPos
    121  f0a6
    122  f0a6		       a5 82		      LDA	BomberXPos
    123  f0a8		       a0 01		      LDY	#1
    124  f0aa		       20 37 f2 	      JSR	SetObjectXPos
    125  f0ad
    126  f0ad		       20 69 f2 	      JSR	CalculateDigitOffset
    127  f0b0
    128  f0b0		       85 02		      STA	WSYNC
    129  f0b2		       85 2a		      STA	HMOVE
    130  f0b4
    131  f0b4		       85 01		      STA	VBLANK
    132  f0b6
    133  f0b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    134  f0b6							;; Display the scoreboard lines
    135  f0b6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    136  f0b6		       a9 00		      LDA	#0
    137  f0b8		       85 0d		      STA	PF0
    138  f0ba		       85 0e		      STA	PF1
    139  f0bc		       85 0f		      STA	PF2
    140  f0be		       85 1b		      STA	GRP0
    141  f0c0		       85 1c		      STA	GRP1
    142  f0c2		       85 0a		      STA	CTRLPF
    143  f0c4		       85 09		      STA	COLUBK
    144  f0c6
    145  f0c6		       a9 1c		      LDA	#$1C
    146  f0c8		       85 08		      STA	COLUPF
    147  f0ca
    148  f0ca		       a2 05		      LDX	#DIGITS_HEIGHT
    149  f0cc				   .ScoreDigitLoop
    150  f0cc		       a4 89		      LDY	TensDigitOffset	; get the tens digit offset for the Score
    151  f0ce		       b9 c9 f2 	      LDA	Digits,Y	; load the bit pattern for the lookup table
    152  f0d1		       29 f0		      AND	#$F0	; remove the ones
    153  f0d3		       85 95		      STA	ScoreSprite
    154  f0d5
    155  f0d5		       a4 87		      LDY	OnesDigitOffset
    156  f0d7		       b9 c9 f2 	      LDA	Digits,Y
    157  f0da		       29 0f		      AND	#$0F
    158  f0dc		       05 95		      ORA	ScoreSprite	; merge the ones and tens sprites
    159  f0de		       85 95		      STA	ScoreSprite
    160  f0e0		       85 02		      STA	WSYNC
    161  f0e2		       85 0e		      STA	PF1
    162  f0e4
    163  f0e4		       a4 8a		      LDY	TensDigitOffset+1
    164  f0e6		       b9 c9 f2 	      LDA	Digits,Y
    165  f0e9		       29 f0		      AND	#$F0
    166  f0eb		       85 96		      STA	TimerSprite
    167  f0ed
    168  f0ed		       a4 88		      LDY	OnesDigitOffset+1
    169  f0ef		       b9 c9 f2 	      LDA	Digits,Y
    170  f0f2		       29 0f		      AND	#$0F
    171  f0f4		       05 96		      ORA	TimerSprite
    172  f0f6		       85 96		      STA	TimerSprite
    173  f0f8
    174  f0f8		       20 89 f2 	      JSR	Sleep12ClocksCycles
    175  f0fb
    176  f0fb		       85 0e		      STA	PF1
    177  f0fd
    178  f0fd		       a4 95		      LDY	ScoreSprite
    179  f0ff		       85 02		      STA	WSYNC
    180  f101
    181  f101		       84 0e		      STY	PF1
    182  f103		       e6 89		      INC	TensDigitOffset
    183  f105		       e6 8a		      INC	TensDigitOffset+1
    184  f107		       e6 87		      INC	OnesDigitOffset
    185  f109		       e6 88		      INC	OnesDigitOffset+1
    186  f10b
    187  f10b		       20 89 f2 	      JSR	Sleep12ClocksCycles
    188  f10e
    189  f10e		       ca		      DEX
    190  f10f		       85 0e		      STA	PF1
    191  f111		       d0 b9		      BNE	.ScoreDigitLoop
    192  f113
    193  f113		       85 02		      STA	WSYNC
    194  f115
    195  f115		       a9 00		      LDA	#0
    196  f117		       85 0d		      STA	PF0
    197  f119		       85 0e		      STA	PF1
    198  f11b		       85 0f		      STA	PF2
    199  f11d		       85 02		      STA	WSYNC
    200  f11f		       85 02		      STA	WSYNC
    201  f121		       85 02		      STA	WSYNC
    202  f123
    203  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    204  f123							;; Display the visibles scanlines of the game
    205  f123							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    206  f123				   GameVisibleLine
    207  f123		       a5 98		      LDA	RiverColor
    208  f125		       85 08		      STA	COLUPF
    209  f127
    210  f127		       a5 97		      LDA	TerrainColor
    211  f129		       85 09		      STA	COLUBK
    212  f12b
    213  f12b		       a9 01		      LDA	#00000001	; Reflect playfield
    214  f12d		       85 0a		      STA	CTRLPF
    215  f12f		       a9 f0		      LDA	#$F0
    216  f131		       85 0d		      STA	PF0
    217  f133		       a9 fc		      LDA	#$FC
    218  f135		       85 0e		      STA	PF1
    219  f137		       a9 00		      LDA	#0
    220  f139		       85 0f		      STA	PF2
    221  f13b
    222  f13b		       a2 55		      LDX	#85	; remaining of the visible scanlines
    223  f13d				   .GameLineLoop
    224  f13d				   .AreWeInsideJetSprite
    225  f13d		       8a		      TXA
    226  f13e		       38		      SEC
    227  f13f		       e5 81		      SBC	JetYPos
    228  f141		       c5 09		      CMP	JET_HEIGHT
    229  f143		       90 02		      BCC	.DrawSpriteP0
    230  f145		       a9 00		      LDA	#0
    231  f147
    232  f147				   .DrawSpriteP0
    233  f147		       18		      CLC
    234  f148		       65 93		      ADC	JetAnimOffset
    235  f14a
    236  f14a		       a8		      TAY		; load Y so we can work with the pointer
    237  f14b		       b1 8b		      LDA	(JetSpritePtr),Y
    238  f14d		       85 02		      STA	WSYNC
    239  f14f		       85 1b		      STA	GRP0
    240  f151		       b1 8d		      LDA	(JetColorPtr),Y
    241  f153		       85 06		      STA	COLUP0
    242  f155
    243  f155				   .AreWeInsideBomberSprite
    244  f155		       8a		      TXA
    245  f156		       38		      SEC
    246  f157		       e5 83		      SBC	BomberYPos
    247  f159		       c5 09		      CMP	BOMBER_HEIGHT
    248  f15b		       90 02		      BCC	.DrawSpriteP1
    249  f15d		       a9 00		      LDA	#0
    250  f15f
    251  f15f				   .DrawSpriteP1
    252  f15f		       a8		      TAY		; load Y so we can work with the pointer
    253  f160		       a9 05		      LDA	#5
    254  f162		       85 05		      STA	NUSIZ1	; stretch player 1 sprite
    255  f164		       b1 8f		      LDA	(BomberSpritePtr),Y
    256  f166		       85 02		      STA	WSYNC
    257  f168		       85 1c		      STA	GRP1
    258  f16a		       b1 91		      LDA	(BomberColorPtr),Y
    259  f16c		       85 07		      STA	COLUP1
    260  f16e
    261  f16e		       ca		      DEX
    262  f16f		       d0 cc		      BNE	.GameLineLoop
    263  f171		       a9 00		      LDA	#0
    264  f173		       85 93		      STA	JetAnimOffset
    265  f175
    266  f175							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    267  f175							;; Output the 30 more VBLANK oversacan lines
    268  f175							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    269  f175		       a9 02		      LDA	#2
    270  f177		       85 01		      STA	VBLANK
    271  f179					      REPEAT	30
    272  f179		       85 02		      STA	WSYNC
    271  f179					      REPEND
    272  f17b		       85 02		      STA	WSYNC
    271  f17b					      REPEND
    272  f17d		       85 02		      STA	WSYNC
    271  f17d					      REPEND
    272  f17f		       85 02		      STA	WSYNC
    271  f17f					      REPEND
    272  f181		       85 02		      STA	WSYNC
    271  f181					      REPEND
    272  f183		       85 02		      STA	WSYNC
    271  f183					      REPEND
    272  f185		       85 02		      STA	WSYNC
    271  f185					      REPEND
    272  f187		       85 02		      STA	WSYNC
    271  f187					      REPEND
    272  f189		       85 02		      STA	WSYNC
    271  f189					      REPEND
    272  f18b		       85 02		      STA	WSYNC
    271  f18b					      REPEND
    272  f18d		       85 02		      STA	WSYNC
    271  f18d					      REPEND
    272  f18f		       85 02		      STA	WSYNC
    271  f18f					      REPEND
    272  f191		       85 02		      STA	WSYNC
    271  f191					      REPEND
    272  f193		       85 02		      STA	WSYNC
    271  f193					      REPEND
    272  f195		       85 02		      STA	WSYNC
    271  f195					      REPEND
    272  f197		       85 02		      STA	WSYNC
    271  f197					      REPEND
    272  f199		       85 02		      STA	WSYNC
    271  f199					      REPEND
    272  f19b		       85 02		      STA	WSYNC
    271  f19b					      REPEND
    272  f19d		       85 02		      STA	WSYNC
    271  f19d					      REPEND
    272  f19f		       85 02		      STA	WSYNC
    271  f19f					      REPEND
    272  f1a1		       85 02		      STA	WSYNC
    271  f1a1					      REPEND
    272  f1a3		       85 02		      STA	WSYNC
    271  f1a3					      REPEND
    272  f1a5		       85 02		      STA	WSYNC
    271  f1a5					      REPEND
    272  f1a7		       85 02		      STA	WSYNC
    271  f1a7					      REPEND
    272  f1a9		       85 02		      STA	WSYNC
    271  f1a9					      REPEND
    272  f1ab		       85 02		      STA	WSYNC
    271  f1ab					      REPEND
    272  f1ad		       85 02		      STA	WSYNC
    271  f1ad					      REPEND
    272  f1af		       85 02		      STA	WSYNC
    271  f1af					      REPEND
    272  f1b1		       85 02		      STA	WSYNC
    271  f1b1					      REPEND
    272  f1b3		       85 02		      STA	WSYNC
    273  f1b5					      REPEND
    274  f1b5		       a9 00		      LDA	#0
    275  f1b7		       85 01		      STA	VBLANK
    276  f1b9
    277  f1b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    278  f1b9							;; Process joystick input for P0
    279  f1b9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    280  f1b9				   CheckP0Up
    281  f1b9		       a9 10		      LDA	#%00010000
    282  f1bb		       2c 80 02 	      BIT	SWCHA
    283  f1be		       d0 0c		      BNE	CheckP0Down
    284  f1c0							; logic goes here \/
    285  f1c0		       a5 81		      LDA	JetYPos
    286  f1c2		       c9 4d		      CMP	#77
    287  f1c4		       10 02		      BPL	.SkipIncJetY
    288  f1c6		       e6 81		      INC	JetYPos
    289  f1c8				   .SkipIncJetY
    290  f1c8		       a9 00		      LDA	#0
    291  f1ca		       85 93		      STA	JetAnimOffset
    292  f1cc
    293  f1cc				   CheckP0Down
    294  f1cc		       a9 20		      LDA	#%00100000
    295  f1ce		       2c 80 02 	      BIT	SWCHA
    296  f1d1		       d0 0c		      BNE	CheckP0Left
    297  f1d3							; logic goes here \/
    298  f1d3		       a5 81		      LDA	JetYPos
    299  f1d5		       c9 02		      CMP	#2
    300  f1d7		       30 02		      BMI	.SkipDecJetY
    301  f1d9		       c6 81		      DEC	JetYPos
    302  f1db				   .SkipDecJetY
    303  f1db		       a9 00		      LDA	#0
    304  f1dd		       85 93		      STA	JetAnimOffset
    305  f1df
    306  f1df				   CheckP0Left
    307  f1df		       a9 40		      LDA	#%01000000
    308  f1e1		       2c 80 02 	      BIT	SWCHA
    309  f1e4		       d0 0c		      BNE	CheckP0Right
    310  f1e6							; logic goes here \/
    311  f1e6		       a5 80		      LDA	JetXPos
    312  f1e8		       c9 1e		      CMP	#30
    313  f1ea		       30 02		      BMI	.SkipDecJetX
    314  f1ec		       c6 80		      DEC	JetXPos
    315  f1ee				   .SkipDecJetX
    316  f1ee		       a5 09		      LDA	JET_HEIGHT
    317  f1f0		       85 93		      STA	JetAnimOffset
    318  f1f2
    319  f1f2				   CheckP0Right
    320  f1f2		       a9 80		      LDA	#%10000000
    321  f1f4		       2c 80 02 	      BIT	SWCHA
    322  f1f7		       d0 0c		      BNE	EndInputCheck
    323  f1f9							; logic goes here \/
    324  f1f9		       a5 80		      LDA	JetXPos
    325  f1fb		       c9 68		      CMP	#104
    326  f1fd		       10 02		      BPL	.SkipIncJetX
    327  f1ff		       e6 80		      INC	JetXPos
    328  f201				   .SkipIncJetX
    329  f201		       a5 09		      LDA	JET_HEIGHT
    330  f203		       85 93		      STA	JetAnimOffset
    331  f205
    332  f205				   EndInputCheck
    333  f205							; logic goes here \/
    334  f205
    335  f205							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    336  f205							;; Update positions
    337  f205							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    338  f205				   UpdateBomberPos
    339  f205		       a5 83		      LDA	BomberYPos
    340  f207		       18		      CLC
    341  f208		       c9 00		      CMP	#0
    342  f20a		       30 05		      BMI	.ResetBomberPosition
    343  f20c		       c6 83		      DEC	BomberYPos
    344  f20e		       4c 18 f2 	      JMP	EndPositionUpdate
    345  f211
    346  f211				   .ResetBomberPosition
    347  f211		       20 4b f2 	      JSR	GetRandomBomberPos
    348  f214		       e6 84		      INC	Score
    349  f216		       e6 85		      INC	Timer
    350  f218
    351  f218				   EndPositionUpdate
    352  f218
    353  f218							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    354  f218							;; Watch for the collisions
    355  f218							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    356  f218				   CheckCollissionP0P1
    357  f218		       a9 80		      LDA	#%10000000
    358  f21a		       24 07		      BIT	CXPPMM
    359  f21c		       d0 06		      BNE	.CollisionP0P1
    360  f21e		       20 8a f2 	      JSR	SetPFBKColor
    361  f221		       4c 27 f2 	      JMP	EndCollisionCheck
    362  f224
    363  f224							; CheckCollisionP0PF:
    364  f224							;     LDA #%10000000
    365  f224							;     BIT CXP0FB
    366  f224							;     BNE .CollisionP0PF
    367  f224							;     JMP EndCollisionCheck
    368  f224
    369  f224							; .CollisionP0PF:
    370  f224							;     JSR GameOver
    371  f224
    372  f224				   .CollisionP0P1
    373  f224		       20 2c f2 	      JSR	GameOver
    374  f227
    375  f227				   EndCollisionCheck
    376  f227		       85 2c		      STA	CXCLR
    377  f229
    378  f229							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    379  f229							;; End of the main loop
    380  f229							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    381  f229		       4c 4d f0 	      JMP	StartFrame
    382  f22c
    383  f22c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    384  f22c							;; Game Over
    385  f22c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    386  f22c				   GameOver   subroutine
    387  f22c		       a9 30		      LDA	#$30
    388  f22e		       85 97		      STA	TerrainColor
    389  f230		       85 98		      STA	RiverColor
    390  f232		       a9 00		      LDA	#0
    391  f234		       85 84		      STA	Score
    392  f236		       60		      RTS
    393  f237
    394  f237							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    395  f237							;; Subroutine to handle object horizontal position with fine offset
    396  f237							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    397  f237							;; A is the target x-coord position in pixels of our object
    398  f237							;; Y is the object type (0: P0, 1: P1, 2: Missile0, 3: Missile1, 4: Ball)
    399  f237							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    400  f237				   SetObjectXPos subroutine
    401  f237		       85 02		      STA	WSYNC
    402  f239		       38		      SEC
    403  f23a				   .Div15Loop
    404  f23a		       e9 0f		      SBC	#15
    405  f23c		       b0 fc		      BCS	.Div15Loop
    406  f23e		       49 07		      EOR	#7
    407  f240		       0a		      ASL
    408  f241		       0a		      ASL
    409  f242		       0a		      ASL
    410  f243		       0a		      ASL
    411  f244		       99 20 00 	      STA	HMP0,Y
    412  f247		       99 10 00 	      STA	RESP0,Y
    413  f24a		       60		      RTS
    414  f24b
    415  f24b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    416  f24b							;; Subroutine to generate a LFSR random number
    417  f24b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    418  f24b							;; Generate a LFSR random number
    419  f24b							;; Divide the random value by 4 to limit the size of the result match river.
    420  f24b							;; After, sums 30 to compensate the green PF
    421  f24b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    422  f24b				   GetRandomBomberPos subroutine
    423  f24b		       a5 94		      LDA	Random	; Load starting random seed
    424  f24d		       0a		      ASL		; arithmetic shift-left
    425  f24e		       45 94		      EOR	Random	; XOR Accumulator with Random
    426  f250		       0a		      ASL		; arithmetic shift-left
    427  f251		       45 94		      EOR	Random	; XOR Accumulator with Random
    428  f253		       0a		      ASL		; arithmetic shift-left
    429  f254		       0a		      ASL		; arithmetic shift-left
    430  f255		       45 94		      EOR	Random	; XOR Accumulator with Random
    431  f257		       0a		      ASL		; arithmetic shift-left
    432  f258		       26 94		      ROL	Random	; rotate left
    433  f25a
    434  f25a		       4a		      LSR		;
    435  f25b		       4a		      LSR		; divide by 4
    436  f25c		       85 82		      STA	BomberXPos
    437  f25e		       a9 1e		      LDA	#30
    438  f260		       65 82		      ADC	BomberXPos
    439  f262		       85 82		      STA	BomberXPos
    440  f264
    441  f264		       a9 55		      LDA	#85
    442  f266		       85 83		      STA	BomberYPos
    443  f268
    444  f268		       60		      RTS
    445  f269
    446  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    447  f269							;; Subroutine to handle scoreboard digits to be displayed on the screen
    448  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    449  f269							;; Convert the high AND low nibbles of the variable Score and Timer into the
    450  f269							;; offsets of digits lookup table so the values can be displayed.
    451  f269							;; Eache digit has a height of 5 bytes.
    452  f269							;;
    453  f269							;; For the low nibble we need to multiply by 5
    454  f269							;; - we can use left shifts to perfom multiplication by 2
    455  f269							;; - for any number N, the value of N*5 = (N*2*2)+N
    456  f269							;;
    457  f269							;; For the upper nibble, since its already times 16, we need to divide it AND
    458  f269							;; the multiply by 5:
    459  f269							;; - we can use right shifts to perfom division by 2
    460  f269							;; - for any number N, the value of (N/16)*5 = (N/4)+(N/16)
    461  f269							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    462  f269				   CalculateDigitOffset subroutine
    463  f269		       a2 01		      LDX	#1
    464  f26b				   .PrepareScoreLoop
    465  f26b		       b5 84		      LDA	Score,X	; Load A with timer when X=1 because timer is below score
    466  f26d		       29 0f		      AND	#$0F	; remove the tens digit by masking 4 bits 00001111
    467  f26f		       85 86		      STA	Temp	; save A
    468  f271		       0a		      ASL		; (N*2)
    469  f272		       0a		      ASL		; (N*2)
    470  f273		       65 86		      ADC	Temp	; +N
    471  f275		       95 87		      STA	OnesDigitOffset,X	; Save A in OnesDigitOffset+1 or OnesDigitOffset+0
    472  f277
    473  f277		       b5 84		      LDA	Score,X	; Load A with timer when X=1 because timer is below score
    474  f279		       29 f0		      AND	#$F0	; remove the ones digit by masking 4 bits 1111000
    475  f27b		       4a		      LSR
    476  f27c		       4a		      LSR
    477  f27d		       85 86		      STA	Temp
    478  f27f		       4a		      LSR
    479  f280		       4a		      LSR
    480  f281		       65 86		      ADC	Temp
    481  f283		       95 89		      STA	TensDigitOffset,X
    482  f285
    483  f285		       ca		      DEX
    484  f286		       10 e3		      BPL	.PrepareScoreLoop
    485  f288
    486  f288		       60		      RTS
    487  f289
    488  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    489  f289							;; subroutine to waste 12 clocks cycles
    490  f289							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    491  f289				   Sleep12ClocksCycles		; JSR = 6
    492  f289		       60		      RTS		; RTS = 6
    493  f28a
    494  f28a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    495  f28a							;; Set the color of terrain (PF) and river (BK)
    496  f28a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    497  f28a				   SetPFBKColor subroutine
    498  f28a		       a9 84		      LDA	#$84
    499  f28c		       85 97		      STA	TerrainColor
    500  f28e		       a9 c2		      LDA	#$C2
    501  f290		       85 98		      STA	RiverColor
    502  f292		       60		      RTS
    503  f293
    504  f293							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    505  f293							;; Lookup table for the sprites
    506  f293							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    507  f293				   JetSprite
    508  f293		       00		      .byte.b	#%00000000
    509  f294		       08		      .byte.b	#%00001000
    510  f295		       7f		      .byte.b	#%01111111
    511  f296		       3e		      .byte.b	#%00111110
    512  f297		       1c		      .byte.b	#%00011100
    513  f298		       1c		      .byte.b	#%00011100
    514  f299		       08		      .byte.b	#%00001000
    515  f29a		       08		      .byte.b	#%00001000
    516  f29b		       08		      .byte.b	#%00001000
    517  f29c
    518  f29c				   JetSpriteTurn
    519  f29c		       00		      .byte.b	#%00000000
    520  f29d		       08		      .byte.b	#%00001000
    521  f29e		       3e		      .byte.b	#%00111110
    522  f29f		       1c		      .byte.b	#%00011100
    523  f2a0		       1c		      .byte.b	#%00011100
    524  f2a1		       1c		      .byte.b	#%00011100
    525  f2a2		       08		      .byte.b	#%00001000
    526  f2a3		       08		      .byte.b	#%00001000
    527  f2a4		       08		      .byte.b	#%00001000
    528  f2a5
    529  f2a5				   JetColor
    530  f2a5		       00		      .byte.b	#$00
    531  f2a6		       fe		      .byte.b	#$FE
    532  f2a7		       08		      .byte.b	#$08
    533  f2a8		       0a		      .byte.b	#$0A
    534  f2a9		       0c		      .byte.b	#$0C
    535  f2aa		       02		      .byte.b	#$02
    536  f2ab		       b8		      .byte.b	#$B8
    537  f2ac		       0a		      .byte.b	#$0A
    538  f2ad		       04		      .byte.b	#$04
    539  f2ae
    540  f2ae		       00		      .byte.b	#$00
    541  f2af		       fe		      .byte.b	#$FE
    542  f2b0		       08		      .byte.b	#$08
    543  f2b1		       0a		      .byte.b	#$0A
    544  f2b2		       0c		      .byte.b	#$0C
    545  f2b3		       02		      .byte.b	#$02
    546  f2b4		       b8		      .byte.b	#$B8
    547  f2b5		       0a		      .byte.b	#$0A
    548  f2b6		       04		      .byte.b	#$04
    549  f2b7
    550  f2b7				   BomberSprite
    551  f2b7		       00		      .byte.b	#%00000000
    552  f2b8		       08		      .byte.b	#%00001000
    553  f2b9		       08		      .byte.b	#%00001000
    554  f2ba		       2a		      .byte.b	#%00101010
    555  f2bb		       7f		      .byte.b	#%01111111
    556  f2bc		       3e		      .byte.b	#%00111110
    557  f2bd		       2a		      .byte.b	#%00101010
    558  f2be		       08		      .byte.b	#%00001000
    559  f2bf		       1c		      .byte.b	#%00011100
    560  f2c0
    561  f2c0				   BomberColor
    562  f2c0		       00		      .byte.b	#$00
    563  f2c1		       24		      .byte.b	#$24
    564  f2c2		       24		      .byte.b	#$24
    565  f2c3		       0c		      .byte.b	#$0C
    566  f2c4		       40		      .byte.b	#$40
    567  f2c5		       40		      .byte.b	#$40
    568  f2c6		       40		      .byte.b	#$40
    569  f2c7		       40		      .byte.b	#$40
    570  f2c8		       40		      .byte.b	#$40
    571  f2c9
    572  f2c9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    573  f2c9							;; Digits graphics
    574  f2c9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    575  f2c9				   Digits
    576  f2c9		       77		      .byte.b	%01110111
    577  f2ca		       55		      .byte.b	%01010101
    578  f2cb		       55		      .byte.b	%01010101
    579  f2cc		       55		      .byte.b	%01010101
    580  f2cd		       77		      .byte.b	%01110111
    581  f2ce
    582  f2ce		       11		      .byte.b	%00010001
    583  f2cf		       11		      .byte.b	%00010001
    584  f2d0		       11		      .byte.b	%00010001
    585  f2d1		       11		      .byte.b	%00010001
    586  f2d2		       11		      .byte.b	%00010001
    587  f2d3
    588  f2d3		       77		      .byte.b	%01110111
    589  f2d4		       11		      .byte.b	%00010001
    590  f2d5		       77		      .byte.b	%01110111
    591  f2d6		       44		      .byte.b	%01000100
    592  f2d7		       77		      .byte.b	%01110111
    593  f2d8
    594  f2d8		       77		      .byte.b	%01110111
    595  f2d9		       11		      .byte.b	%00010001
    596  f2da		       33		      .byte.b	%00110011
    597  f2db		       11		      .byte.b	%00010001
    598  f2dc		       77		      .byte.b	%01110111
    599  f2dd
    600  f2dd		       55		      .byte.b	%01010101
    601  f2de		       55		      .byte.b	%01010101
    602  f2df		       77		      .byte.b	%01110111
    603  f2e0		       11		      .byte.b	%00010001
    604  f2e1		       11		      .byte.b	%00010001
    605  f2e2
    606  f2e2		       77		      .byte.b	%01110111
    607  f2e3		       44		      .byte.b	%01000100
    608  f2e4		       77		      .byte.b	%01110111
    609  f2e5		       11		      .byte.b	%00010001
    610  f2e6		       77		      .byte.b	%01110111
    611  f2e7
    612  f2e7		       77		      .byte.b	%01110111
    613  f2e8		       44		      .byte.b	%01000100
    614  f2e9		       77		      .byte.b	%01110111
    615  f2ea		       55		      .byte.b	%01010101
    616  f2eb		       77		      .byte.b	%01110111
    617  f2ec
    618  f2ec		       77		      .byte.b	%01110111
    619  f2ed		       11		      .byte.b	%00010001
    620  f2ee		       11		      .byte.b	%00010001
    621  f2ef		       11		      .byte.b	%00010001
    622  f2f0		       11		      .byte.b	%00010001
    623  f2f1
    624  f2f1		       77		      .byte.b	%01110111
    625  f2f2		       55		      .byte.b	%01010101
    626  f2f3		       77		      .byte.b	%01110111
    627  f2f4		       55		      .byte.b	%01010101
    628  f2f5		       77		      .byte.b	%01110111
    629  f2f6
    630  f2f6		       77		      .byte.b	%01110111
    631  f2f7		       55		      .byte.b	%01010101
    632  f2f8		       77		      .byte.b	%01110111
    633  f2f9		       11		      .byte.b	%00010001
    634  f2fa		       77		      .byte.b	%01110111
    635  f2fb
    636  f2fb		       22		      .byte.b	%00100010
    637  f2fc		       55		      .byte.b	%01010101
    638  f2fd		       77		      .byte.b	%01110111
    639  f2fe		       55		      .byte.b	%01010101
    640  f2ff		       55		      .byte.b	%01010101
    641  f300
    642  f300		       66		      .byte.b	%01100110
    643  f301		       55		      .byte.b	%01010101
    644  f302		       66		      .byte.b	%01100110
    645  f303		       55		      .byte.b	%01010101
    646  f304		       66		      .byte.b	%01100110
    647  f305
    648  f305		       33		      .byte.b	%00110011
    649  f306		       44		      .byte.b	%01000100
    650  f307		       44		      .byte.b	%01000100
    651  f308		       44		      .byte.b	%01000100
    652  f309		       33		      .byte.b	%00110011
    653  f30a
    654  f30a		       66		      .byte.b	%01100110
    655  f30b		       55		      .byte.b	%01010101
    656  f30c		       55		      .byte.b	%01010101
    657  f30d		       55		      .byte.b	%01010101
    658  f30e		       66		      .byte.b	%01100110
    659  f30f
    660  f30f		       77		      .byte.b	%01110111
    661  f310		       44		      .byte.b	%01000100
    662  f311		       66		      .byte.b	%01100110
    663  f312		       44		      .byte.b	%01000100
    664  f313		       77		      .byte.b	%01110111
    665  f314
    666  f314		       77		      .byte.b	%01110111
    667  f315		       44		      .byte.b	%01000100
    668  f316		       66		      .byte.b	%01100110
    669  f317		       44		      .byte.b	%01000100
    670  f318		       44		      .byte.b	%01000100
    671  f319
    672  f319
    673  f319							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    674  f319							;; Filling the 4kb memory needed
    675  f319							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    676  fffc					      org	$FFFC
    677  fffc		       00 f0		      .word.w	Reset
    678  fffe		       00 f0		      .word.w	Reset
