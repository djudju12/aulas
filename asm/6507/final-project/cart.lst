------- FILE bomb.asm LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						;; Program Name: Bomber Game
      3  10000 ????						;; Author: https://www.udemy.com/course/programming-games-for-the-atari-2600
      4  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      5  10000 ????				       processor	6502
      6  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomb.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE bomb.asm
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Variables segment
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U008e ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b
     16 U0081		       00	   JetYPos    byte.b
     17 U0082		       00	   BomberXPos byte.b
     18 U0083		       00	   BomberYPos byte.b
     19 U0084		       00 00	   JetSpritePtr word.w
     20 U0086		       00 00	   JetColorPtr word.w
     21 U0088		       00 00	   BomberSpritePtr word.w
     22 U008a		       00 00	   BomberColorPtr word.w
     23 U008c		       00	   JetAnimOffset byte.b
     24 U008d		       00	   Random     byte.b
     25 U008e
     26 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     27 U008e							;; Constants
     28 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     29 U008e		       00 09	   JET_HEIGHT =	9
     30 U008e		       00 09	   BOMBER_HEIGHT =	9
     31 U008e
     32 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33 U008e							;; Start of the program
     34 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  10000 ????				       seg	code
     36  f000					      org	$F000
     37  f000
     38  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     40  f00b
     41  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42  f00b							;; Init RAM variables and TIA register
     43  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     44  f00b		       a9 32		      LDA	#50
     45  f00d		       85 80		      STA	JetXPos
     46  f00f		       a9 0a		      LDA	#10
     47  f011		       85 81		      STA	JetYPos
     48  f013
     49  f013		       a9 28		      LDA	#40
     50  f015		       85 82		      STA	BomberXPos
     51  f017		       a9 36		      LDA	#54
     52  f019		       85 83		      STA	BomberYPos
     53  f01b
     54  f01b		       a9 d4		      LDA	#%11010100
     55  f01d		       85 8d		      STA	Random
     56  f01f
     57  f01f		       a9 10		      LDA	#<JetSprite
     58  f021		       85 84		      STA	JetSpritePtr
     59  f023		       a9 f2		      LDA	#>JetSprite
     60  f025		       85 85		      STA	JetSpritePtr+1
     61  f027
     62  f027		       a9 22		      LDA	#<JetColor
     63  f029		       85 86		      STA	JetColorPtr
     64  f02b		       a9 f2		      LDA	#>JetColor
     65  f02d		       85 87		      STA	JetColorPtr+1
     66  f02f
     67  f02f		       a9 34		      LDA	#<BomberSprite
     68  f031		       85 88		      STA	BomberSpritePtr
     69  f033		       a9 f2		      LDA	#>BomberSprite
     70  f035		       85 89		      STA	BomberSpritePtr+1
     71  f037
     72  f037		       a9 3d		      LDA	#<BomberColor
     73  f039		       85 8a		      STA	BomberColorPtr
     74  f03b		       a9 f2		      LDA	#>BomberColor
     75  f03d		       85 8b		      STA	BomberColorPtr+1
     76  f03f
     77  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     78  f03f							;; Start of the main loop
     79  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     80  f03f				   StartFrame
     81  f03f
     82  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     83  f03f							;; Calculations and tasks performed in the pre-VBlank
     84  f03f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     85  f03f		       a5 80		      LDA	JetXPos
     86  f041		       a0 00		      LDY	#0
     87  f043		       20 de f1 	      JSR	SetObjectXPos
     88  f046
     89  f046		       a5 82		      LDA	BomberXPos
     90  f048		       a0 01		      LDY	#1
     91  f04a		       20 de f1 	      JSR	SetObjectXPos
     92  f04d
     93  f04d		       85 02		      STA	WSYNC
     94  f04f		       85 2a		      STA	HMOVE
     95  f051
     96  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     97  f051							;; Generate the three lines of the VSYNC and 37 lines of the VBLANK
     98  f051							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     99  f051		       a9 02		      LDA	#02
    100  f053		       85 01		      STA	VBLANK
    101  f055		       85 00		      STA	VSYNC
    102  f057					      REPEAT	3
    103  f057		       85 02		      sta	WSYNC
    102  f057					      REPEND
    103  f059		       85 02		      sta	WSYNC
    102  f059					      REPEND
    103  f05b		       85 02		      sta	WSYNC
    104  f05d					      REPEND
    105  f05d		       a9 00		      LDA	#0
    106  f05f		       85 00		      STA	VSYNC
    107  f061					      REPEAT	37
    108  f061		       85 02		      STA	WSYNC
    107  f061					      REPEND
    108  f063		       85 02		      STA	WSYNC
    107  f063					      REPEND
    108  f065		       85 02		      STA	WSYNC
    107  f065					      REPEND
    108  f067		       85 02		      STA	WSYNC
    107  f067					      REPEND
    108  f069		       85 02		      STA	WSYNC
    107  f069					      REPEND
    108  f06b		       85 02		      STA	WSYNC
    107  f06b					      REPEND
    108  f06d		       85 02		      STA	WSYNC
    107  f06d					      REPEND
    108  f06f		       85 02		      STA	WSYNC
    107  f06f					      REPEND
    108  f071		       85 02		      STA	WSYNC
    107  f071					      REPEND
    108  f073		       85 02		      STA	WSYNC
    107  f073					      REPEND
    108  f075		       85 02		      STA	WSYNC
    107  f075					      REPEND
    108  f077		       85 02		      STA	WSYNC
    107  f077					      REPEND
    108  f079		       85 02		      STA	WSYNC
    107  f079					      REPEND
    108  f07b		       85 02		      STA	WSYNC
    107  f07b					      REPEND
    108  f07d		       85 02		      STA	WSYNC
    107  f07d					      REPEND
    108  f07f		       85 02		      STA	WSYNC
    107  f07f					      REPEND
    108  f081		       85 02		      STA	WSYNC
    107  f081					      REPEND
    108  f083		       85 02		      STA	WSYNC
    107  f083					      REPEND
    108  f085		       85 02		      STA	WSYNC
    107  f085					      REPEND
    108  f087		       85 02		      STA	WSYNC
    107  f087					      REPEND
    108  f089		       85 02		      STA	WSYNC
    107  f089					      REPEND
    108  f08b		       85 02		      STA	WSYNC
    107  f08b					      REPEND
    108  f08d		       85 02		      STA	WSYNC
    107  f08d					      REPEND
    108  f08f		       85 02		      STA	WSYNC
    107  f08f					      REPEND
    108  f091		       85 02		      STA	WSYNC
    107  f091					      REPEND
    108  f093		       85 02		      STA	WSYNC
    107  f093					      REPEND
    108  f095		       85 02		      STA	WSYNC
    107  f095					      REPEND
    108  f097		       85 02		      STA	WSYNC
    107  f097					      REPEND
    108  f099		       85 02		      STA	WSYNC
    107  f099					      REPEND
    108  f09b		       85 02		      STA	WSYNC
    107  f09b					      REPEND
    108  f09d		       85 02		      STA	WSYNC
    107  f09d					      REPEND
    108  f09f		       85 02		      STA	WSYNC
    107  f09f					      REPEND
    108  f0a1		       85 02		      STA	WSYNC
    107  f0a1					      REPEND
    108  f0a3		       85 02		      STA	WSYNC
    107  f0a3					      REPEND
    108  f0a5		       85 02		      STA	WSYNC
    107  f0a5					      REPEND
    108  f0a7		       85 02		      STA	WSYNC
    107  f0a7					      REPEND
    108  f0a9		       85 02		      STA	WSYNC
    109  f0ab					      REPEND
    110  f0ab		       85 01		      STA	VBLANK
    111  f0ad
    112  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    113  f0ad							;; Display the scoreboard lines
    114  f0ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f0ad		       a9 00		      LDA	#0
    116  f0af		       85 0d		      STA	PF0
    117  f0b1		       85 0e		      STA	PF1
    118  f0b3		       85 0f		      STA	PF2
    119  f0b5		       85 1b		      STA	GRP0
    120  f0b7		       85 1c		      STA	GRP1
    121  f0b9		       85 08		      STA	COLUPF
    122  f0bb					      REPEAT	20
    123  f0bb		       85 02		      STA	WSYNC
    122  f0bb					      REPEND
    123  f0bd		       85 02		      STA	WSYNC
    122  f0bd					      REPEND
    123  f0bf		       85 02		      STA	WSYNC
    122  f0bf					      REPEND
    123  f0c1		       85 02		      STA	WSYNC
    122  f0c1					      REPEND
    123  f0c3		       85 02		      STA	WSYNC
    122  f0c3					      REPEND
    123  f0c5		       85 02		      STA	WSYNC
    122  f0c5					      REPEND
    123  f0c7		       85 02		      STA	WSYNC
    122  f0c7					      REPEND
    123  f0c9		       85 02		      STA	WSYNC
    122  f0c9					      REPEND
    123  f0cb		       85 02		      STA	WSYNC
    122  f0cb					      REPEND
    123  f0cd		       85 02		      STA	WSYNC
    122  f0cd					      REPEND
    123  f0cf		       85 02		      STA	WSYNC
    122  f0cf					      REPEND
    123  f0d1		       85 02		      STA	WSYNC
    122  f0d1					      REPEND
    123  f0d3		       85 02		      STA	WSYNC
    122  f0d3					      REPEND
    123  f0d5		       85 02		      STA	WSYNC
    122  f0d5					      REPEND
    123  f0d7		       85 02		      STA	WSYNC
    122  f0d7					      REPEND
    123  f0d9		       85 02		      STA	WSYNC
    122  f0d9					      REPEND
    123  f0db		       85 02		      STA	WSYNC
    122  f0db					      REPEND
    123  f0dd		       85 02		      STA	WSYNC
    122  f0dd					      REPEND
    123  f0df		       85 02		      STA	WSYNC
    122  f0df					      REPEND
    123  f0e1		       85 02		      STA	WSYNC
    124  f0e3					      REPEND
    125  f0e3
    126  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    127  f0e3							;; Display the visibles scanlines of the game
    128  f0e3							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f0e3				   GameVisibleLine
    130  f0e3		       a9 84		      LDA	#$84	; blue
    131  f0e5		       85 09		      STA	COLUBK
    132  f0e7
    133  f0e7		       a9 c2		      LDA	#$C2
    134  f0e9		       85 08		      STA	COLUPF	; green
    135  f0eb
    136  f0eb		       a9 01		      LDA	#1	; Reflect playfield
    137  f0ed		       85 0a		      STA	CTRLPF
    138  f0ef
    139  f0ef		       a9 f0		      LDA	#%11110000
    140  f0f1		       85 0d		      STA	PF0
    141  f0f3
    142  f0f3		       a9 f0		      LDA	#%11110000
    143  f0f5		       85 0e		      STA	PF1
    144  f0f7
    145  f0f7		       a9 00		      LDA	#0
    146  f0f9		       85 0f		      STA	PF2
    147  f0fb
    148  f0fb		       a2 54		      LDX	#84	; remaining of the visible scanlines
    149  f0fd				   .GameLineLoop
    150  f0fd				   .AreWeInsideJetSprite
    151  f0fd		       8a		      TXA
    152  f0fe		       38		      SEC
    153  f0ff		       e5 81		      SBC	JetYPos
    154  f101		       c5 09		      CMP	JET_HEIGHT
    155  f103		       90 02		      BCC	.DrawSpriteP0
    156  f105		       a9 00		      LDA	#0
    157  f107
    158  f107				   .DrawSpriteP0
    159  f107		       18		      CLC
    160  f108		       65 8c		      ADC	JetAnimOffset
    161  f10a
    162  f10a		       a8		      TAY		; load Y so we can work with the pointer
    163  f10b		       b1 84		      LDA	(JetSpritePtr),Y
    164  f10d		       85 02		      STA	WSYNC
    165  f10f		       85 1b		      STA	GRP0
    166  f111		       b1 86		      LDA	(JetColorPtr),Y
    167  f113		       85 06		      STA	COLUP0
    168  f115
    169  f115				   .AreWeInsideBomberSprite
    170  f115		       8a		      TXA
    171  f116		       38		      SEC
    172  f117		       e5 83		      SBC	BomberYPos
    173  f119		       c5 09		      CMP	BOMBER_HEIGHT
    174  f11b		       90 02		      BCC	.DrawSpriteP1
    175  f11d		       a9 00		      LDA	#0
    176  f11f
    177  f11f				   .DrawSpriteP1
    178  f11f		       a8		      TAY		; load Y so we can work with the pointer
    179  f120		       a9 05		      LDA	#5
    180  f122		       85 05		      STA	NUSIZ1	; stretch player 1 sprite
    181  f124		       b1 88		      LDA	(BomberSpritePtr),Y
    182  f126		       85 02		      STA	WSYNC
    183  f128		       85 1c		      STA	GRP1
    184  f12a		       b1 8a		      LDA	(BomberColorPtr),Y
    185  f12c		       85 07		      STA	COLUP1
    186  f12e
    187  f12e		       ca		      DEX
    188  f12f		       d0 cc		      BNE	.GameLineLoop
    189  f131		       a9 00		      LDA	#0
    190  f133		       85 8c		      STA	JetAnimOffset
    191  f135
    192  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    193  f135							;; Output the 30 more VBLANK oversacan lines
    194  f135							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    195  f135		       a9 02		      LDA	#2
    196  f137		       85 01		      STA	VBLANK
    197  f139					      REPEAT	30
    198  f139		       85 02		      STA	WSYNC
    197  f139					      REPEND
    198  f13b		       85 02		      STA	WSYNC
    197  f13b					      REPEND
    198  f13d		       85 02		      STA	WSYNC
    197  f13d					      REPEND
    198  f13f		       85 02		      STA	WSYNC
    197  f13f					      REPEND
    198  f141		       85 02		      STA	WSYNC
    197  f141					      REPEND
    198  f143		       85 02		      STA	WSYNC
    197  f143					      REPEND
    198  f145		       85 02		      STA	WSYNC
    197  f145					      REPEND
    198  f147		       85 02		      STA	WSYNC
    197  f147					      REPEND
    198  f149		       85 02		      STA	WSYNC
    197  f149					      REPEND
    198  f14b		       85 02		      STA	WSYNC
    197  f14b					      REPEND
    198  f14d		       85 02		      STA	WSYNC
    197  f14d					      REPEND
    198  f14f		       85 02		      STA	WSYNC
    197  f14f					      REPEND
    198  f151		       85 02		      STA	WSYNC
    197  f151					      REPEND
    198  f153		       85 02		      STA	WSYNC
    197  f153					      REPEND
    198  f155		       85 02		      STA	WSYNC
    197  f155					      REPEND
    198  f157		       85 02		      STA	WSYNC
    197  f157					      REPEND
    198  f159		       85 02		      STA	WSYNC
    197  f159					      REPEND
    198  f15b		       85 02		      STA	WSYNC
    197  f15b					      REPEND
    198  f15d		       85 02		      STA	WSYNC
    197  f15d					      REPEND
    198  f15f		       85 02		      STA	WSYNC
    197  f15f					      REPEND
    198  f161		       85 02		      STA	WSYNC
    197  f161					      REPEND
    198  f163		       85 02		      STA	WSYNC
    197  f163					      REPEND
    198  f165		       85 02		      STA	WSYNC
    197  f165					      REPEND
    198  f167		       85 02		      STA	WSYNC
    197  f167					      REPEND
    198  f169		       85 02		      STA	WSYNC
    197  f169					      REPEND
    198  f16b		       85 02		      STA	WSYNC
    197  f16b					      REPEND
    198  f16d		       85 02		      STA	WSYNC
    197  f16d					      REPEND
    198  f16f		       85 02		      STA	WSYNC
    197  f16f					      REPEND
    198  f171		       85 02		      STA	WSYNC
    197  f171					      REPEND
    198  f173		       85 02		      STA	WSYNC
    199  f175					      REPEND
    200  f175		       a9 00		      LDA	#0
    201  f177		       85 01		      STA	VBLANK
    202  f179
    203  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    204  f179							;; Process joystick input for P0
    205  f179							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    206  f179				   CheckP0Up
    207  f179		       a9 10		      LDA	#%00010000
    208  f17b		       2c 80 02 	      BIT	SWCHA
    209  f17e		       d0 06		      BNE	CheckP0Down
    210  f180							; logic goes here \/
    211  f180		       e6 81		      INC	JetYPos
    212  f182		       a9 00		      LDA	#0
    213  f184		       85 8c		      STA	JetAnimOffset
    214  f186
    215  f186				   CheckP0Down
    216  f186		       a9 20		      LDA	#%00100000
    217  f188		       2c 80 02 	      BIT	SWCHA
    218  f18b		       d0 06		      BNE	CheckP0Left
    219  f18d							; logic goes here \/
    220  f18d		       c6 81		      DEC	JetYPos
    221  f18f		       a9 00		      LDA	#0
    222  f191		       85 8c		      STA	JetAnimOffset
    223  f193
    224  f193				   CheckP0Left
    225  f193		       a9 40		      LDA	#%01000000
    226  f195		       2c 80 02 	      BIT	SWCHA
    227  f198		       d0 06		      BNE	CheckP0Right
    228  f19a							; logic goes here \/
    229  f19a		       c6 80		      DEC	JetXPos
    230  f19c		       a5 09		      LDA	JET_HEIGHT
    231  f19e		       85 8c		      STA	JetAnimOffset
    232  f1a0
    233  f1a0				   CheckP0Right
    234  f1a0		       a9 80		      LDA	#%10000000
    235  f1a2		       2c 80 02 	      BIT	SWCHA
    236  f1a5		       d0 06		      BNE	EndInputCheck
    237  f1a7							; logic goes here \/
    238  f1a7		       e6 80		      INC	JetXPos
    239  f1a9		       a5 09		      LDA	JET_HEIGHT
    240  f1ab		       85 8c		      STA	JetAnimOffset
    241  f1ad
    242  f1ad
    243  f1ad				   EndInputCheck
    244  f1ad							; logic goes here \/
    245  f1ad
    246  f1ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    247  f1ad							;; Update positions
    248  f1ad							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    249  f1ad				   UpdateBomberPos
    250  f1ad		       a5 83		      LDA	BomberYPos
    251  f1af		       18		      CLC
    252  f1b0		       c9 00		      CMP	#0
    253  f1b2		       30 05		      BMI	.ResetBomberPosition
    254  f1b4		       c6 83		      DEC	BomberYPos
    255  f1b6		       4c bc f1 	      JMP	EndPositionUpdate
    256  f1b9
    257  f1b9				   .ResetBomberPosition
    258  f1b9		       20 f2 f1 	      JSR	GetRandomBomberPos
    259  f1bc
    260  f1bc				   EndPositionUpdate
    261  f1bc
    262  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    263  f1bc							;; Watch for the collisions
    264  f1bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    265  f1bc				   CheckCollissionP0P1
    266  f1bc		       a9 80		      LDA	#%10000000
    267  f1be		       24 07		      BIT	CXPPMM
    268  f1c0		       d0 0f		      BNE	.CollisionP0P1
    269  f1c2		       4c c5 f1 	      JMP	CheckCollisionP0PF
    270  f1c5
    271  f1c5				   CheckCollisionP0PF
    272  f1c5		       a9 80		      LDA	#%10000000
    273  f1c7		       24 02		      BIT	CXP0FB
    274  f1c9		       d0 03		      BNE	.CollisionP0PF
    275  f1cb		       4c d4 f1 	      JMP	EndCollisionCheck
    276  f1ce
    277  f1ce				   .CollisionP0PF
    278  f1ce		       20 d9 f1 	      JSR	GameOver
    279  f1d1
    280  f1d1				   .CollisionP0P1
    281  f1d1		       20 d9 f1 	      JSR	GameOver
    282  f1d4
    283  f1d4				   EndCollisionCheck
    284  f1d4		       85 2c		      STA	CXCLR
    285  f1d6
    286  f1d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    287  f1d6							;; End of the main loop
    288  f1d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    289  f1d6		       4c 3f f0 	      JMP	StartFrame
    290  f1d9
    291  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    292  f1d9							;; Game Over
    293  f1d9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    294  f1d9				   GameOver   subroutine
    295  f1d9		       a9 30		      LDA	#$30
    296  f1db		       85 09		      STA	COLUBK
    297  f1dd		       60		      RTS
    298  f1de
    299  f1de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    300  f1de							;; Subroutine to handle object horizontal position with fine offset
    301  f1de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    302  f1de							;; A is the target x-coord position in pixels of our object
    303  f1de							;; Y is the object type (0: P0, 1: P1, 2: Missile0, 3: Missile1, 4: Ball)
    304  f1de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    305  f1de				   SetObjectXPos subroutine
    306  f1de		       85 02		      STA	WSYNC
    307  f1e0		       38		      SEC
    308  f1e1				   .Div15Loop
    309  f1e1		       e9 0f		      SBC	#15
    310  f1e3		       b0 fc		      BCS	.Div15Loop
    311  f1e5		       49 07		      EOR	#7
    312  f1e7		       0a		      ASL
    313  f1e8		       0a		      ASL
    314  f1e9		       0a		      ASL
    315  f1ea		       0a		      ASL
    316  f1eb		       99 20 00 	      STA	HMP0,Y
    317  f1ee		       99 10 00 	      STA	RESP0,Y
    318  f1f1		       60		      RTS
    319  f1f2
    320  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    321  f1f2							;; Subroutine to generate a LFSR random number
    322  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    323  f1f2							;; Generate a LFSR random number
    324  f1f2							;; Divide the random value by 4 to limit the size of the result match river.
    325  f1f2							;; After, sums 30 to compensate the green PF
    326  f1f2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    327  f1f2				   GetRandomBomberPos subroutine
    328  f1f2		       a5 8d		      LDA	Random	; Load starting random seed
    329  f1f4		       0a		      ASL		; arithmetic shift-left
    330  f1f5		       45 8d		      EOR	Random	; XOR Accumulator with Random
    331  f1f7		       0a		      ASL		; arithmetic shift-left
    332  f1f8		       45 8d		      EOR	Random	; XOR Accumulator with Random
    333  f1fa		       0a		      ASL		; arithmetic shift-left
    334  f1fb		       0a		      ASL		; arithmetic shift-left
    335  f1fc		       45 8d		      EOR	Random	; XOR Accumulator with Random
    336  f1fe		       0a		      ASL		; arithmetic shift-left
    337  f1ff		       26 8d		      ROL	Random	; rotate left
    338  f201
    339  f201		       4a		      LSR		;
    340  f202		       4a		      LSR		; divide by 4
    341  f203		       85 82		      STA	BomberXPos
    342  f205		       a9 1e		      LDA	#30
    343  f207		       65 82		      ADC	BomberXPos
    344  f209		       85 82		      STA	BomberXPos
    345  f20b
    346  f20b		       a9 54		      LDA	#84
    347  f20d		       85 83		      STA	BomberYPos
    348  f20f
    349  f20f		       60		      RTS
    350  f210
    351  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    352  f210							;; Lookup table for the sprites
    353  f210							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    354  f210				   JetSprite
    355  f210		       00		      .byte.b	#%00000000
    356  f211		       08		      .byte.b	#%00001000
    357  f212		       7f		      .byte.b	#%01111111
    358  f213		       3e		      .byte.b	#%00111110
    359  f214		       1c		      .byte.b	#%00011100
    360  f215		       1c		      .byte.b	#%00011100
    361  f216		       08		      .byte.b	#%00001000
    362  f217		       08		      .byte.b	#%00001000
    363  f218		       08		      .byte.b	#%00001000
    364  f219
    365  f219				   JetSpriteTurn
    366  f219		       00		      .byte.b	#%00000000
    367  f21a		       08		      .byte.b	#%00001000
    368  f21b		       3e		      .byte.b	#%00111110
    369  f21c		       1c		      .byte.b	#%00011100
    370  f21d		       1c		      .byte.b	#%00011100
    371  f21e		       1c		      .byte.b	#%00011100
    372  f21f		       08		      .byte.b	#%00001000
    373  f220		       08		      .byte.b	#%00001000
    374  f221		       08		      .byte.b	#%00001000
    375  f222
    376  f222				   JetColor
    377  f222		       00		      .byte.b	#$00
    378  f223		       fe		      .byte.b	#$FE
    379  f224		       08		      .byte.b	#$08
    380  f225		       0a		      .byte.b	#$0A
    381  f226		       0c		      .byte.b	#$0C
    382  f227		       02		      .byte.b	#$02
    383  f228		       b8		      .byte.b	#$B8
    384  f229		       0a		      .byte.b	#$0A
    385  f22a		       04		      .byte.b	#$04
    386  f22b
    387  f22b		       00		      .byte.b	#$00
    388  f22c		       fe		      .byte.b	#$FE
    389  f22d		       08		      .byte.b	#$08
    390  f22e		       0a		      .byte.b	#$0A
    391  f22f		       0c		      .byte.b	#$0C
    392  f230		       02		      .byte.b	#$02
    393  f231		       b8		      .byte.b	#$B8
    394  f232		       0a		      .byte.b	#$0A
    395  f233		       04		      .byte.b	#$04
    396  f234
    397  f234				   BomberSprite
    398  f234		       00		      .byte.b	#%00000000
    399  f235		       08		      .byte.b	#%00001000
    400  f236		       08		      .byte.b	#%00001000
    401  f237		       2a		      .byte.b	#%00101010
    402  f238		       7f		      .byte.b	#%01111111
    403  f239		       3e		      .byte.b	#%00111110
    404  f23a		       2a		      .byte.b	#%00101010
    405  f23b		       08		      .byte.b	#%00001000
    406  f23c		       1c		      .byte.b	#%00011100
    407  f23d
    408  f23d				   BomberColor
    409  f23d		       00		      .byte.b	#$00
    410  f23e		       24		      .byte.b	#$24
    411  f23f		       24		      .byte.b	#$24
    412  f240		       0c		      .byte.b	#$0C
    413  f241		       40		      .byte.b	#$40
    414  f242		       40		      .byte.b	#$40
    415  f243		       40		      .byte.b	#$40
    416  f244		       40		      .byte.b	#$40
    417  f245		       40		      .byte.b	#$40
    418  f246
    419  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    420  f246							;; Filling the 4kb memory needed
    421  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    422  fffc					      org	$FFFC
    423  fffc		       00 f0		      .word.w	Reset
    424  fffe		       00 f0		      .word.w	Reset
