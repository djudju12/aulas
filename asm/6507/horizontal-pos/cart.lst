------- FILE horizontal.asm LEVEL 1 PASS 2
      1  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  10000 ????						;; Program Name: Horizontal Position
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????				       processor	6502
      5  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE horizontal.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE horizontal.asm
      8  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      9  0000 ????						;; Variables segment
     10  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     11 U0083 ????				      seg.u	Variables
     12 U0080					      org	$80
     13 U0080		       00	   P0XPos     .byte.b
     14 U0081		       00	   MaxPos     .byte.b
     15 U0082		       00	   MinPos     .byte.b
     16 U0083
     17 U0083							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     18 U0083							;; Start of the program
     19 U0083							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     20  10000 ????				       seg	code
     21  f000					      org	$F000
     22  f000
     23  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     25  f00b
     26  f00b		       a2 00		      LDX	#$00
     27  f00d		       86 09		      STX	COLUBK
     28  f00f
     29  f00f		       a9 a2		      LDA	#162
     30  f011		       85 81		      STA	MaxPos
     31  f013
     32  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33  f013							;; Turn on VSYNC and VBLANK
     34  f013							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     35  f013				   StartFrame
     36  f013		       a9 02		      LDA	#02
     37  f015		       85 01		      STA	VBLANK
     38  f017		       85 00		      STA	VSYNC
     39  f019
     40  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     41  f019							;; Generate the three lines of the VSYNC
     42  f019							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43  f019					      REPEAT	3
     44  f019		       85 02		      sta	WSYNC
     43  f019					      REPEND
     44  f01b		       85 02		      sta	WSYNC
     43  f01b					      REPEND
     44  f01d		       85 02		      sta	WSYNC
     45  f01f					      REPEND
     46  f01f		       a9 00		      LDA	#0
     47  f021		       85 00		      STA	VSYNC
     48  f023
     49  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     50  f023							;; Set player horizontal position whule we are in the VBLANK
     51  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f023		       a5 80		      LDA	P0XPos
     53  f025		       a0 00		      LDY	#0
     54  f027		       20 50 f2 	      JSR	SetObjectXPos
     55  f02a
     56  f02a		       85 02		      STA	WSYNC
     57  f02c		       85 2a		      STA	HMOVE
     58  f02e
     59  f02e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f02e							;; Let the TIA output the (37 - 2 ) lines of the VBLANK
     61  f02e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     62  f02e					      REPEAT	35
     63  f02e		       85 02		      sta	WSYNC
     62  f02e					      REPEND
     63  f030		       85 02		      sta	WSYNC
     62  f030					      REPEND
     63  f032		       85 02		      sta	WSYNC
     62  f032					      REPEND
     63  f034		       85 02		      sta	WSYNC
     62  f034					      REPEND
     63  f036		       85 02		      sta	WSYNC
     62  f036					      REPEND
     63  f038		       85 02		      sta	WSYNC
     62  f038					      REPEND
     63  f03a		       85 02		      sta	WSYNC
     62  f03a					      REPEND
     63  f03c		       85 02		      sta	WSYNC
     62  f03c					      REPEND
     63  f03e		       85 02		      sta	WSYNC
     62  f03e					      REPEND
     63  f040		       85 02		      sta	WSYNC
     62  f040					      REPEND
     63  f042		       85 02		      sta	WSYNC
     62  f042					      REPEND
     63  f044		       85 02		      sta	WSYNC
     62  f044					      REPEND
     63  f046		       85 02		      sta	WSYNC
     62  f046					      REPEND
     63  f048		       85 02		      sta	WSYNC
     62  f048					      REPEND
     63  f04a		       85 02		      sta	WSYNC
     62  f04a					      REPEND
     63  f04c		       85 02		      sta	WSYNC
     62  f04c					      REPEND
     63  f04e		       85 02		      sta	WSYNC
     62  f04e					      REPEND
     63  f050		       85 02		      sta	WSYNC
     62  f050					      REPEND
     63  f052		       85 02		      sta	WSYNC
     62  f052					      REPEND
     63  f054		       85 02		      sta	WSYNC
     62  f054					      REPEND
     63  f056		       85 02		      sta	WSYNC
     62  f056					      REPEND
     63  f058		       85 02		      sta	WSYNC
     62  f058					      REPEND
     63  f05a		       85 02		      sta	WSYNC
     62  f05a					      REPEND
     63  f05c		       85 02		      sta	WSYNC
     62  f05c					      REPEND
     63  f05e		       85 02		      sta	WSYNC
     62  f05e					      REPEND
     63  f060		       85 02		      sta	WSYNC
     62  f060					      REPEND
     63  f062		       85 02		      sta	WSYNC
     62  f062					      REPEND
     63  f064		       85 02		      sta	WSYNC
     62  f064					      REPEND
     63  f066		       85 02		      sta	WSYNC
     62  f066					      REPEND
     63  f068		       85 02		      sta	WSYNC
     62  f068					      REPEND
     63  f06a		       85 02		      sta	WSYNC
     62  f06a					      REPEND
     63  f06c		       85 02		      sta	WSYNC
     62  f06c					      REPEND
     63  f06e		       85 02		      sta	WSYNC
     62  f06e					      REPEND
     63  f070		       85 02		      sta	WSYNC
     62  f070					      REPEND
     63  f072		       85 02		      sta	WSYNC
     64  f074					      REPEND
     65  f074		       a9 00		      LDA	#0
     66  f076		       85 01		      STA	VBLANK
     67  f078
     68  f078							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     69  f078							;; Draw the rest of the visible scanlines
     70  f078							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f078					      REPEAT	60
     72  f078		       85 02		      STA	WSYNC
     71  f078					      REPEND
     72  f07a		       85 02		      STA	WSYNC
     71  f07a					      REPEND
     72  f07c		       85 02		      STA	WSYNC
     71  f07c					      REPEND
     72  f07e		       85 02		      STA	WSYNC
     71  f07e					      REPEND
     72  f080		       85 02		      STA	WSYNC
     71  f080					      REPEND
     72  f082		       85 02		      STA	WSYNC
     71  f082					      REPEND
     72  f084		       85 02		      STA	WSYNC
     71  f084					      REPEND
     72  f086		       85 02		      STA	WSYNC
     71  f086					      REPEND
     72  f088		       85 02		      STA	WSYNC
     71  f088					      REPEND
     72  f08a		       85 02		      STA	WSYNC
     71  f08a					      REPEND
     72  f08c		       85 02		      STA	WSYNC
     71  f08c					      REPEND
     72  f08e		       85 02		      STA	WSYNC
     71  f08e					      REPEND
     72  f090		       85 02		      STA	WSYNC
     71  f090					      REPEND
     72  f092		       85 02		      STA	WSYNC
     71  f092					      REPEND
     72  f094		       85 02		      STA	WSYNC
     71  f094					      REPEND
     72  f096		       85 02		      STA	WSYNC
     71  f096					      REPEND
     72  f098		       85 02		      STA	WSYNC
     71  f098					      REPEND
     72  f09a		       85 02		      STA	WSYNC
     71  f09a					      REPEND
     72  f09c		       85 02		      STA	WSYNC
     71  f09c					      REPEND
     72  f09e		       85 02		      STA	WSYNC
     71  f09e					      REPEND
     72  f0a0		       85 02		      STA	WSYNC
     71  f0a0					      REPEND
     72  f0a2		       85 02		      STA	WSYNC
     71  f0a2					      REPEND
     72  f0a4		       85 02		      STA	WSYNC
     71  f0a4					      REPEND
     72  f0a6		       85 02		      STA	WSYNC
     71  f0a6					      REPEND
     72  f0a8		       85 02		      STA	WSYNC
     71  f0a8					      REPEND
     72  f0aa		       85 02		      STA	WSYNC
     71  f0aa					      REPEND
     72  f0ac		       85 02		      STA	WSYNC
     71  f0ac					      REPEND
     72  f0ae		       85 02		      STA	WSYNC
     71  f0ae					      REPEND
     72  f0b0		       85 02		      STA	WSYNC
     71  f0b0					      REPEND
     72  f0b2		       85 02		      STA	WSYNC
     71  f0b2					      REPEND
     72  f0b4		       85 02		      STA	WSYNC
     71  f0b4					      REPEND
     72  f0b6		       85 02		      STA	WSYNC
     71  f0b6					      REPEND
     72  f0b8		       85 02		      STA	WSYNC
     71  f0b8					      REPEND
     72  f0ba		       85 02		      STA	WSYNC
     71  f0ba					      REPEND
     72  f0bc		       85 02		      STA	WSYNC
     71  f0bc					      REPEND
     72  f0be		       85 02		      STA	WSYNC
     71  f0be					      REPEND
     72  f0c0		       85 02		      STA	WSYNC
     71  f0c0					      REPEND
     72  f0c2		       85 02		      STA	WSYNC
     71  f0c2					      REPEND
     72  f0c4		       85 02		      STA	WSYNC
     71  f0c4					      REPEND
     72  f0c6		       85 02		      STA	WSYNC
     71  f0c6					      REPEND
     72  f0c8		       85 02		      STA	WSYNC
     71  f0c8					      REPEND
     72  f0ca		       85 02		      STA	WSYNC
     71  f0ca					      REPEND
     72  f0cc		       85 02		      STA	WSYNC
     71  f0cc					      REPEND
     72  f0ce		       85 02		      STA	WSYNC
     71  f0ce					      REPEND
     72  f0d0		       85 02		      STA	WSYNC
     71  f0d0					      REPEND
     72  f0d2		       85 02		      STA	WSYNC
     71  f0d2					      REPEND
     72  f0d4		       85 02		      STA	WSYNC
     71  f0d4					      REPEND
     72  f0d6		       85 02		      STA	WSYNC
     71  f0d6					      REPEND
     72  f0d8		       85 02		      STA	WSYNC
     71  f0d8					      REPEND
     72  f0da		       85 02		      STA	WSYNC
     71  f0da					      REPEND
     72  f0dc		       85 02		      STA	WSYNC
     71  f0dc					      REPEND
     72  f0de		       85 02		      STA	WSYNC
     71  f0de					      REPEND
     72  f0e0		       85 02		      STA	WSYNC
     71  f0e0					      REPEND
     72  f0e2		       85 02		      STA	WSYNC
     71  f0e2					      REPEND
     72  f0e4		       85 02		      STA	WSYNC
     71  f0e4					      REPEND
     72  f0e6		       85 02		      STA	WSYNC
     71  f0e6					      REPEND
     72  f0e8		       85 02		      STA	WSYNC
     71  f0e8					      REPEND
     72  f0ea		       85 02		      STA	WSYNC
     71  f0ea					      REPEND
     72  f0ec		       85 02		      STA	WSYNC
     71  f0ec					      REPEND
     72  f0ee		       85 02		      STA	WSYNC
     73  f0f0					      REPEND
     74  f0f0
     75  f0f0		       a4 08		      LDY	8
     76  f0f2				   DrawBitmap
     77  f0f2		       b9 64 f2 	      LDA	P0Bitmap,Y
     78  f0f5		       85 1b		      STA	GRP0
     79  f0f7
     80  f0f7		       b9 6d f2 	      LDA	P0Color,Y
     81  f0fa		       85 06		      STA	COLUP0
     82  f0fc
     83  f0fc		       85 02		      STA	WSYNC
     84  f0fe
     85  f0fe		       88		      DEY
     86  f0ff		       d0 f1		      BNE	DrawBitmap
     87  f101
     88  f101		       a9 00		      LDA	#0
     89  f103		       85 1b		      STA	GRP0
     90  f105
     91  f105					      REPEAT	124
     92  f105		       85 02		      STA	WSYNC
     91  f105					      REPEND
     92  f107		       85 02		      STA	WSYNC
     91  f107					      REPEND
     92  f109		       85 02		      STA	WSYNC
     91  f109					      REPEND
     92  f10b		       85 02		      STA	WSYNC
     91  f10b					      REPEND
     92  f10d		       85 02		      STA	WSYNC
     91  f10d					      REPEND
     92  f10f		       85 02		      STA	WSYNC
     91  f10f					      REPEND
     92  f111		       85 02		      STA	WSYNC
     91  f111					      REPEND
     92  f113		       85 02		      STA	WSYNC
     91  f113					      REPEND
     92  f115		       85 02		      STA	WSYNC
     91  f115					      REPEND
     92  f117		       85 02		      STA	WSYNC
     91  f117					      REPEND
     92  f119		       85 02		      STA	WSYNC
     91  f119					      REPEND
     92  f11b		       85 02		      STA	WSYNC
     91  f11b					      REPEND
     92  f11d		       85 02		      STA	WSYNC
     91  f11d					      REPEND
     92  f11f		       85 02		      STA	WSYNC
     91  f11f					      REPEND
     92  f121		       85 02		      STA	WSYNC
     91  f121					      REPEND
     92  f123		       85 02		      STA	WSYNC
     91  f123					      REPEND
     92  f125		       85 02		      STA	WSYNC
     91  f125					      REPEND
     92  f127		       85 02		      STA	WSYNC
     91  f127					      REPEND
     92  f129		       85 02		      STA	WSYNC
     91  f129					      REPEND
     92  f12b		       85 02		      STA	WSYNC
     91  f12b					      REPEND
     92  f12d		       85 02		      STA	WSYNC
     91  f12d					      REPEND
     92  f12f		       85 02		      STA	WSYNC
     91  f12f					      REPEND
     92  f131		       85 02		      STA	WSYNC
     91  f131					      REPEND
     92  f133		       85 02		      STA	WSYNC
     91  f133					      REPEND
     92  f135		       85 02		      STA	WSYNC
     91  f135					      REPEND
     92  f137		       85 02		      STA	WSYNC
     91  f137					      REPEND
     92  f139		       85 02		      STA	WSYNC
     91  f139					      REPEND
     92  f13b		       85 02		      STA	WSYNC
     91  f13b					      REPEND
     92  f13d		       85 02		      STA	WSYNC
     91  f13d					      REPEND
     92  f13f		       85 02		      STA	WSYNC
     91  f13f					      REPEND
     92  f141		       85 02		      STA	WSYNC
     91  f141					      REPEND
     92  f143		       85 02		      STA	WSYNC
     91  f143					      REPEND
     92  f145		       85 02		      STA	WSYNC
     91  f145					      REPEND
     92  f147		       85 02		      STA	WSYNC
     91  f147					      REPEND
     92  f149		       85 02		      STA	WSYNC
     91  f149					      REPEND
     92  f14b		       85 02		      STA	WSYNC
     91  f14b					      REPEND
     92  f14d		       85 02		      STA	WSYNC
     91  f14d					      REPEND
     92  f14f		       85 02		      STA	WSYNC
     91  f14f					      REPEND
     92  f151		       85 02		      STA	WSYNC
     91  f151					      REPEND
     92  f153		       85 02		      STA	WSYNC
     91  f153					      REPEND
     92  f155		       85 02		      STA	WSYNC
     91  f155					      REPEND
     92  f157		       85 02		      STA	WSYNC
     91  f157					      REPEND
     92  f159		       85 02		      STA	WSYNC
     91  f159					      REPEND
     92  f15b		       85 02		      STA	WSYNC
     91  f15b					      REPEND
     92  f15d		       85 02		      STA	WSYNC
     91  f15d					      REPEND
     92  f15f		       85 02		      STA	WSYNC
     91  f15f					      REPEND
     92  f161		       85 02		      STA	WSYNC
     91  f161					      REPEND
     92  f163		       85 02		      STA	WSYNC
     91  f163					      REPEND
     92  f165		       85 02		      STA	WSYNC
     91  f165					      REPEND
     92  f167		       85 02		      STA	WSYNC
     91  f167					      REPEND
     92  f169		       85 02		      STA	WSYNC
     91  f169					      REPEND
     92  f16b		       85 02		      STA	WSYNC
     91  f16b					      REPEND
     92  f16d		       85 02		      STA	WSYNC
     91  f16d					      REPEND
     92  f16f		       85 02		      STA	WSYNC
     91  f16f					      REPEND
     92  f171		       85 02		      STA	WSYNC
     91  f171					      REPEND
     92  f173		       85 02		      STA	WSYNC
     91  f173					      REPEND
     92  f175		       85 02		      STA	WSYNC
     91  f175					      REPEND
     92  f177		       85 02		      STA	WSYNC
     91  f177					      REPEND
     92  f179		       85 02		      STA	WSYNC
     91  f179					      REPEND
     92  f17b		       85 02		      STA	WSYNC
     91  f17b					      REPEND
     92  f17d		       85 02		      STA	WSYNC
     91  f17d					      REPEND
     92  f17f		       85 02		      STA	WSYNC
     91  f17f					      REPEND
     92  f181		       85 02		      STA	WSYNC
     91  f181					      REPEND
     92  f183		       85 02		      STA	WSYNC
     91  f183					      REPEND
     92  f185		       85 02		      STA	WSYNC
     91  f185					      REPEND
     92  f187		       85 02		      STA	WSYNC
     91  f187					      REPEND
     92  f189		       85 02		      STA	WSYNC
     91  f189					      REPEND
     92  f18b		       85 02		      STA	WSYNC
     91  f18b					      REPEND
     92  f18d		       85 02		      STA	WSYNC
     91  f18d					      REPEND
     92  f18f		       85 02		      STA	WSYNC
     91  f18f					      REPEND
     92  f191		       85 02		      STA	WSYNC
     91  f191					      REPEND
     92  f193		       85 02		      STA	WSYNC
     91  f193					      REPEND
     92  f195		       85 02		      STA	WSYNC
     91  f195					      REPEND
     92  f197		       85 02		      STA	WSYNC
     91  f197					      REPEND
     92  f199		       85 02		      STA	WSYNC
     91  f199					      REPEND
     92  f19b		       85 02		      STA	WSYNC
     91  f19b					      REPEND
     92  f19d		       85 02		      STA	WSYNC
     91  f19d					      REPEND
     92  f19f		       85 02		      STA	WSYNC
     91  f19f					      REPEND
     92  f1a1		       85 02		      STA	WSYNC
     91  f1a1					      REPEND
     92  f1a3		       85 02		      STA	WSYNC
     91  f1a3					      REPEND
     92  f1a5		       85 02		      STA	WSYNC
     91  f1a5					      REPEND
     92  f1a7		       85 02		      STA	WSYNC
     91  f1a7					      REPEND
     92  f1a9		       85 02		      STA	WSYNC
     91  f1a9					      REPEND
     92  f1ab		       85 02		      STA	WSYNC
     91  f1ab					      REPEND
     92  f1ad		       85 02		      STA	WSYNC
     91  f1ad					      REPEND
     92  f1af		       85 02		      STA	WSYNC
     91  f1af					      REPEND
     92  f1b1		       85 02		      STA	WSYNC
     91  f1b1					      REPEND
     92  f1b3		       85 02		      STA	WSYNC
     91  f1b3					      REPEND
     92  f1b5		       85 02		      STA	WSYNC
     91  f1b5					      REPEND
     92  f1b7		       85 02		      STA	WSYNC
     91  f1b7					      REPEND
     92  f1b9		       85 02		      STA	WSYNC
     91  f1b9					      REPEND
     92  f1bb		       85 02		      STA	WSYNC
     91  f1bb					      REPEND
     92  f1bd		       85 02		      STA	WSYNC
     91  f1bd					      REPEND
     92  f1bf		       85 02		      STA	WSYNC
     91  f1bf					      REPEND
     92  f1c1		       85 02		      STA	WSYNC
     91  f1c1					      REPEND
     92  f1c3		       85 02		      STA	WSYNC
     91  f1c3					      REPEND
     92  f1c5		       85 02		      STA	WSYNC
     91  f1c5					      REPEND
     92  f1c7		       85 02		      STA	WSYNC
     91  f1c7					      REPEND
     92  f1c9		       85 02		      STA	WSYNC
     91  f1c9					      REPEND
     92  f1cb		       85 02		      STA	WSYNC
     91  f1cb					      REPEND
     92  f1cd		       85 02		      STA	WSYNC
     91  f1cd					      REPEND
     92  f1cf		       85 02		      STA	WSYNC
     91  f1cf					      REPEND
     92  f1d1		       85 02		      STA	WSYNC
     91  f1d1					      REPEND
     92  f1d3		       85 02		      STA	WSYNC
     91  f1d3					      REPEND
     92  f1d5		       85 02		      STA	WSYNC
     91  f1d5					      REPEND
     92  f1d7		       85 02		      STA	WSYNC
     91  f1d7					      REPEND
     92  f1d9		       85 02		      STA	WSYNC
     91  f1d9					      REPEND
     92  f1db		       85 02		      STA	WSYNC
     91  f1db					      REPEND
     92  f1dd		       85 02		      STA	WSYNC
     91  f1dd					      REPEND
     92  f1df		       85 02		      STA	WSYNC
     91  f1df					      REPEND
     92  f1e1		       85 02		      STA	WSYNC
     91  f1e1					      REPEND
     92  f1e3		       85 02		      STA	WSYNC
     91  f1e3					      REPEND
     92  f1e5		       85 02		      STA	WSYNC
     91  f1e5					      REPEND
     92  f1e7		       85 02		      STA	WSYNC
     91  f1e7					      REPEND
     92  f1e9		       85 02		      STA	WSYNC
     91  f1e9					      REPEND
     92  f1eb		       85 02		      STA	WSYNC
     91  f1eb					      REPEND
     92  f1ed		       85 02		      STA	WSYNC
     91  f1ed					      REPEND
     92  f1ef		       85 02		      STA	WSYNC
     91  f1ef					      REPEND
     92  f1f1		       85 02		      STA	WSYNC
     91  f1f1					      REPEND
     92  f1f3		       85 02		      STA	WSYNC
     91  f1f3					      REPEND
     92  f1f5		       85 02		      STA	WSYNC
     91  f1f5					      REPEND
     92  f1f7		       85 02		      STA	WSYNC
     91  f1f7					      REPEND
     92  f1f9		       85 02		      STA	WSYNC
     91  f1f9					      REPEND
     92  f1fb		       85 02		      STA	WSYNC
     93  f1fd					      REPEND
     94  f1fd
     95  f1fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     96  f1fd							;; Output the 30 more VBLANK oversacan lines
     97  f1fd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f1fd		       a9 02		      LDA	#2
     99  f1ff		       85 01		      STA	VBLANK
    100  f201					      REPEAT	30
    101  f201		       85 02		      STA	WSYNC
    100  f201					      REPEND
    101  f203		       85 02		      STA	WSYNC
    100  f203					      REPEND
    101  f205		       85 02		      STA	WSYNC
    100  f205					      REPEND
    101  f207		       85 02		      STA	WSYNC
    100  f207					      REPEND
    101  f209		       85 02		      STA	WSYNC
    100  f209					      REPEND
    101  f20b		       85 02		      STA	WSYNC
    100  f20b					      REPEND
    101  f20d		       85 02		      STA	WSYNC
    100  f20d					      REPEND
    101  f20f		       85 02		      STA	WSYNC
    100  f20f					      REPEND
    101  f211		       85 02		      STA	WSYNC
    100  f211					      REPEND
    101  f213		       85 02		      STA	WSYNC
    100  f213					      REPEND
    101  f215		       85 02		      STA	WSYNC
    100  f215					      REPEND
    101  f217		       85 02		      STA	WSYNC
    100  f217					      REPEND
    101  f219		       85 02		      STA	WSYNC
    100  f219					      REPEND
    101  f21b		       85 02		      STA	WSYNC
    100  f21b					      REPEND
    101  f21d		       85 02		      STA	WSYNC
    100  f21d					      REPEND
    101  f21f		       85 02		      STA	WSYNC
    100  f21f					      REPEND
    101  f221		       85 02		      STA	WSYNC
    100  f221					      REPEND
    101  f223		       85 02		      STA	WSYNC
    100  f223					      REPEND
    101  f225		       85 02		      STA	WSYNC
    100  f225					      REPEND
    101  f227		       85 02		      STA	WSYNC
    100  f227					      REPEND
    101  f229		       85 02		      STA	WSYNC
    100  f229					      REPEND
    101  f22b		       85 02		      STA	WSYNC
    100  f22b					      REPEND
    101  f22d		       85 02		      STA	WSYNC
    100  f22d					      REPEND
    101  f22f		       85 02		      STA	WSYNC
    100  f22f					      REPEND
    101  f231		       85 02		      STA	WSYNC
    100  f231					      REPEND
    101  f233		       85 02		      STA	WSYNC
    100  f233					      REPEND
    101  f235		       85 02		      STA	WSYNC
    100  f235					      REPEND
    101  f237		       85 02		      STA	WSYNC
    100  f237					      REPEND
    101  f239		       85 02		      STA	WSYNC
    100  f239					      REPEND
    101  f23b		       85 02		      STA	WSYNC
    102  f23d					      REPEND
    103  f23d		       a9 00		      LDA	#0
    104  f23f		       85 01		      STA	VBLANK
    105  f241
    106  f241							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    107  f241							;; End of the program
    108  f241							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    109  f241		       e6 80		      INC	P0XPos
    110  f243		       a5 80		      LDA	P0XPos
    111  f245
    112  f245				   compare
    113  f245		       c5 81		      CMP	MaxPos	;; 10 > 162?
    114  f247		       90 04		      BCC	SkipAjust
    115  f249
    116  f249		       a9 00		      LDA	#0
    117  f24b		       85 80		      STA	P0XPos
    118  f24d				   SkipAjust
    119  f24d		       4c 13 f0 	      JMP	StartFrame
    120  f250
    121  f250							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    122  f250							;; Creater a subroutine to set the x position of objects with fine offset
    123  f250							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  f250							;; `A` register contains the desired X-coordinate
    125  f250							;; Y=0 : Player0
    126  f250							;; Y=1 : Player1
    127  f250							;; Y=2 : Missile0
    128  f250							;; Y=3 : Missile1
    129  f250							;; Y=4 : Ball
    130  f250							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f250				   SetObjectXPos subroutine
    132  f250		       85 02		      STA	WSYNC
    133  f252		       38		      SEC
    134  f253				   .Divide15Loop
    135  f253		       e9 0f		      SBC	#15
    136  f255		       b0 fc		      BCS	.Divide15Loop
    137  f257
    138  f257		       49 07		      EOR	#7
    139  f259		       0a		      ASL
    140  f25a		       0a		      ASL
    141  f25b		       0a		      ASL
    142  f25c		       0a		      ASL
    143  f25d
    144  f25d		       99 20 00 	      STA	HMP0,Y
    145  f260		       99 10 00 	      STA	RESP0,Y
    146  f263
    147  f263		       60		      RTS
    148  f264
    149  f264							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    150  f264							;; Lookup table
    151  f264							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    152  f264				   P0Bitmap
    153  f264		       00		      byte.b	#%00000000
    154  f265		       28		      byte.b	#%00101000
    155  f266		       74		      byte.b	#%01110100
    156  f267		       fa		      byte.b	#%11111010
    157  f268		       fa		      byte.b	#%11111010
    158  f269		       fa		      byte.b	#%11111010
    159  f26a		       fe		      byte.b	#%11111110
    160  f26b		       6c		      byte.b	#%01101100
    161  f26c		       30		      byte.b	#%00110000
    162  f26d
    163  f26d				   P0Color
    164  f26d		       00		      byte.b	#$00
    165  f26e		       40		      byte.b	#$40
    166  f26f		       40		      byte.b	#$40
    167  f270		       40		      byte.b	#$40
    168  f271		       42		      byte.b	#$42
    169  f272		       42		      byte.b	#$42
    170  f273		       44		      byte.b	#$44
    171  f274		       d2		      byte.b	#$D2
    172  f275
    173  f275
    174  fffc					      org	$FFFC
    175  fffc		       00 f0		      .word.w	Reset
    176  fffe		       00 f0		      .word.w	Reset
